[
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "runInContext",
        "params": [
            [
                "Object",
                "[context=root]",
                "The context object.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns a new `lodash` function."
        ],
        "type": "Function",
        "comment": "/**\r\n   * Create a new pristine `lodash` function using the given `context` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @category Utility\r\n   * @param {Object} [context=root] The context object.\r\n   * @returns {Function} Returns a new `lodash` function.\r\n   * @example\r\n   *\r\n   * _.mixin({ 'foo': _.constant('foo') });\r\n   *\r\n   * var lodash = _.runInContext();\r\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\r\n   *\r\n   * _.isFunction(_.foo);\r\n   * // => true\r\n   * _.isFunction(_.bar);\r\n   * // => false\r\n   *\r\n   * lodash.isFunction(lodash.foo);\r\n   * // => false\r\n   * lodash.isFunction(lodash.bar);\r\n   * // => true\r\n   *\r\n   * // using `context` to mock `Date#getTime` use in `_.now`\r\n   * var mock = _.runInContext({\r\n   *   'Date': function() {\r\n   *     return { 'getTime': getTimeMock };\r\n   *   }\r\n   * });\r\n   *\r\n   * // or creating a suped-up `defer` in Node.js\r\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\r\n   */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": true,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "name": "_",
        "params": [
            [
                "*",
                "value",
                "The value to wrap in a `lodash` instance.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new `lodash` wrapper instance."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a `lodash` object which wraps `value` to enable implicit chaining.\r\n     * Methods that operate on and return arrays, collections, and functions can\r\n     * be chained together. Methods that return a boolean or single value will\r\n     * automatically end the chain returning the unwrapped value. Explicit chaining\r\n     * may be enabled using `_.chain`. The execution of chained methods is lazy,\r\n     * that is, execution is deferred until `_#value` is implicitly or explicitly\r\n     * called.\r\n     *\r\n     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\r\n     * fusion is an optimization that merges iteratees to avoid creating intermediate\r\n     * arrays and reduce the number of iteratee executions.\r\n     *\r\n     * Chaining is supported in custom builds as long as the `_#value` method is\r\n     * directly or indirectly included in the build.\r\n     *\r\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\r\n     *\r\n     * The wrapper `Array` methods are:\r\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,\r\n     * `splice`, and `unshift`\r\n     *\r\n     * The wrapper `String` methods are:\r\n     * `replace` and `split`\r\n     *\r\n     * The wrapper methods that support shortcut fusion are:\r\n     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,\r\n     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,\r\n     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,\r\n     * and `where`\r\n     *\r\n     * The chainable wrapper methods are:\r\n     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,\r\n     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,\r\n     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,\r\n     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,\r\n     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,\r\n     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,\r\n     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,\r\n     * `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\r\n     * `memoize`, `merge`, `method`, `methodOf`, `mixin`, `negate`, `omit`, `once`,\r\n     * `pairs`, `partial`, `partialRight`, `partition`, `pick`, `plant`, `pluck`,\r\n     * `property`, `propertyOf`, `pull`, `pullAt`, `push`, `range`, `rearg`,\r\n     * `reject`, `remove`, `rest`, `restParam`, `reverse`, `set`, `shuffle`,\r\n     * `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`, `spread`,\r\n     * `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,\r\n     * `thru`, `times`, `toArray`, `toPlainObject`, `transform`, `union`, `uniq`,\r\n     * `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `where`, `without`,\r\n     * `wrap`, `xor`, `zip`, `zipObject`, `zipWith`\r\n     *\r\n     * The wrapper methods that are **not** chainable by default are:\r\n     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,\r\n     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,\r\n     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `get`,\r\n     * `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`, `inRange`, `isArguments`,\r\n     * `isArray`, `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`,\r\n     * `isFinite` `isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`,\r\n     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,\r\n     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `lt`, `lte`,\r\n     * `max`, `min`, `noConflict`, `noop`, `now`, `pad`, `padLeft`, `padRight`,\r\n     * `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`,\r\n     * `runInContext`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,\r\n     * `sortedLastIndex`, `startCase`, `startsWith`, `sum`, `template`, `trim`,\r\n     * `trimLeft`, `trimRight`, `trunc`, `unescape`, `uniqueId`, `value`, and `words`\r\n     *\r\n     * The wrapper method `sample` will return a wrapped value when `n` is provided,\r\n     * otherwise an unwrapped value is returned.\r\n     *\r\n     * @name _\r\n     * @constructor\r\n     * @category Chain\r\n     * @param {*} value The value to wrap in a `lodash` instance.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var wrapped = _([1, 2, 3]);\r\n     *\r\n     * // returns an unwrapped value\r\n     * wrapped.reduce(function(total, n) {\r\n     *   return total + n;\r\n     * });\r\n     * // => 6\r\n     *\r\n     * // returns a wrapped value\r\n     * var squares = wrapped.map(function(n) {\r\n     *   return n * n;\r\n     * });\r\n     *\r\n     * _.isArray(squares);\r\n     * // => false\r\n     *\r\n     * _.isArray(squares.value());\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "support",
        "params": [],
        "returns": [],
        "type": "Object",
        "comment": "/**\r\n     * An object environment feature flags.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @type Object\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "argsTag",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if the `toStringTag` of `arguments` objects is resolvable\r\n       * (all but Firefox < 4, IE < 9).\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "enumErrorProps",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if `name` or `message` properties of `Error.prototype` are\r\n       * enumerable by default (IE < 9, Safari < 5.1).\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "enumPrototypes",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if `prototype` properties are enumerable by default.\r\n       *\r\n       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1\r\n       * (if the prototype or a property on the prototype has been set)\r\n       * incorrectly set the `[[Enumerable]]` value of a function's `prototype`\r\n       * property to `true`.\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "nodeTag",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if the `toStringTag` of DOM nodes is resolvable (all but IE < 9).\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "nonEnumShadows",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.\r\n       *\r\n       * In IE < 9 an object's own properties, shadowing non-enumerable ones,\r\n       * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "ownLast",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if own properties are iterated after inherited properties (IE < 9).\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "spliceObjects",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect if `Array#shift` and `Array#splice` augment array-like objects\r\n       * correctly.\r\n       *\r\n       * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array\r\n       * `shift()` and `splice()` functions that fail to remove the last element,\r\n       * `value[0]`, of array-like objects even though the \"length\" property is\r\n       * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,\r\n       * while `splice()` is buggy regardless of mode in IE < 9.\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.support",
        "name": "unindexedChars",
        "params": [],
        "returns": [],
        "type": "boolean",
        "comment": "/**\r\n       * Detect lack of support for accessing string characters by index.\r\n       *\r\n       * IE < 8 can't access characters by index. IE 8 can only access characters\r\n       * by index on string literals, not string objects.\r\n       *\r\n       * @memberOf _.support\r\n       * @type boolean\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "templateSettings",
        "params": [],
        "returns": [],
        "type": "Object",
        "comment": "/**\r\n     * By default, the template delimiters used by lodash are like those in\r\n     * embedded Ruby (ERB). Change the following template settings to use\r\n     * alternative delimiters.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @type Object\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.templateSettings",
        "name": "escape",
        "params": [],
        "returns": [],
        "type": "RegExp",
        "comment": "/**\r\n       * Used to detect `data` property values to be HTML-escaped.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type RegExp\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.templateSettings",
        "name": "evaluate",
        "params": [],
        "returns": [],
        "type": "RegExp",
        "comment": "/**\r\n       * Used to detect code to be evaluated.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type RegExp\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.templateSettings",
        "name": "interpolate",
        "params": [],
        "returns": [],
        "type": "RegExp",
        "comment": "/**\r\n       * Used to detect `data` property values to inject.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type RegExp\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.templateSettings",
        "name": "variable",
        "params": [],
        "returns": [],
        "type": "string",
        "comment": "/**\r\n       * Used to reference the data object in the template text.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type string\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.templateSettings",
        "name": "imports",
        "params": [],
        "returns": [],
        "type": "Object",
        "comment": "/**\r\n       * Used to import variables into the compiled template.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type Object\r\n       */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Methods",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_.templateSettings.imports",
        "name": "_",
        "params": [],
        "returns": [],
        "type": "Function",
        "comment": "/**\r\n         * A reference to the `lodash` function.\r\n         *\r\n         * @memberOf _.templateSettings.imports\r\n         * @type Function\r\n         */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "chunk",
        "params": [
            [
                "Array",
                "array",
                "The array to process.\r "
            ],
            [
                "number",
                "[size=1]",
                "The length of each chunk.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array containing chunks."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of elements split into groups the length of `size`.\r\n     * If `collection` can't be split evenly, the final chunk will be the remaining\r\n     * elements.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to process.\r\n     * @param {number} [size=1] The length of each chunk.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the new array containing chunks.\r\n     * @example\r\n     *\r\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\r\n     * // => [['a', 'b'], ['c', 'd']]\r\n     *\r\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\r\n     * // => [['a', 'b', 'c'], ['d']]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "compact",
        "params": [
            [
                "Array",
                "array",
                "The array to compact.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of filtered values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array with all falsey values removed. The values `false`, `null`,\r\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to compact.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.compact([0, 1, false, 2, '', 3]);\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "difference",
        "params": [
            [
                "Array",
                "array",
                "The array to inspect.\r "
            ],
            [
                "...Array",
                "[values]",
                "The arrays of values to exclude.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of filtered values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of unique `array` values not included in the other\r\n     * provided arrays using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...Array} [values] The arrays of values to exclude.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.difference([1, 2, 3], [4, 2]);\r\n     * // => [1, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "drop",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "number",
                "[n=1]",
                "The number of elements to drop.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to drop.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.drop([1, 2, 3]);\r\n     * // => [2, 3]\r\n     *\r\n     * _.drop([1, 2, 3], 2);\r\n     * // => [3]\r\n     *\r\n     * _.drop([1, 2, 3], 5);\r\n     * // => []\r\n     *\r\n     * _.drop([1, 2, 3], 0);\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "dropRight",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "number",
                "[n=1]",
                "The number of elements to drop.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` with `n` elements dropped from the end.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to drop.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.dropRight([1, 2, 3]);\r\n     * // => [1, 2]\r\n     *\r\n     * _.dropRight([1, 2, 3], 2);\r\n     * // => [1]\r\n     *\r\n     * _.dropRight([1, 2, 3], 5);\r\n     * // => []\r\n     *\r\n     * _.dropRight([1, 2, 3], 0);\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "dropRightWhile",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` excluding elements dropped from the end.\r\n     * Elements are dropped until `predicate` returns falsey. The predicate is\r\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that match the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.dropRightWhile([1, 2, 3], function(n) {\r\n     *   return n > 1;\r\n     * });\r\n     * // => [1]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');\r\n     * // => ['barney', 'fred']\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');\r\n     * // => ['barney']\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.dropRightWhile(users, 'active'), 'user');\r\n     * // => ['barney', 'fred', 'pebbles']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "dropWhile",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` excluding elements dropped from the beginning.\r\n     * Elements are dropped until `predicate` returns falsey. The predicate is\r\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.dropWhile([1, 2, 3], function(n) {\r\n     *   return n < 3;\r\n     * });\r\n     * // => [3]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');\r\n     * // => ['fred', 'pebbles']\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.pluck(_.dropWhile(users, 'active', false), 'user');\r\n     * // => ['pebbles']\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.dropWhile(users, 'active'), 'user');\r\n     * // => ['barney', 'fred', 'pebbles']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "fill",
        "params": [
            [
                "Array",
                "array",
                "The array to fill.\r "
            ],
            [
                "*",
                "value",
                "The value to fill `array` with.\r "
            ],
            [
                "number",
                "[start=0]",
                "The start position.\r "
            ],
            [
                "number",
                "[end=array.length]",
                "The end position.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Fills elements of `array` with `value` from `start` up to, but not\r\n     * including, `end`.\r\n     *\r\n     * **Note:** This method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to fill.\r\n     * @param {*} value The value to fill `array` with.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _.fill(array, 'a');\r\n     * console.log(array);\r\n     * // => ['a', 'a', 'a']\r\n     *\r\n     * _.fill(Array(3), 2);\r\n     * // => [2, 2, 2]\r\n     *\r\n     * _.fill([4, 6, 8], '*', 1, 2);\r\n     * // => [4, '*', 8]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "findIndex",
        "params": [
            [
                "Array",
                "array",
                "The array to search.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the index of the found element, else `-1`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.find` except that it returns the index of the first\r\n     * element `predicate` returns truthy for instead of the element itself.\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to search.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {number} Returns the index of the found element, else `-1`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * _.findIndex(users, function(chr) {\r\n     *   return chr.user == 'barney';\r\n     * });\r\n     * // => 0\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\r\n     * // => 1\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.findIndex(users, 'active', false);\r\n     * // => 0\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.findIndex(users, 'active');\r\n     * // => 2\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "findLastIndex",
        "params": [
            [
                "Array",
                "array",
                "The array to search.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the index of the found element, else `-1`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.findIndex` except that it iterates over elements\r\n     * of `collection` from right to left.\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to search.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {number} Returns the index of the found element, else `-1`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * _.findLastIndex(users, function(chr) {\r\n     *   return chr.user == 'pebbles';\r\n     * });\r\n     * // => 2\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\r\n     * // => 0\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.findLastIndex(users, 'active', false);\r\n     * // => 2\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.findLastIndex(users, 'active');\r\n     * // => 0\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "head"
        ],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "first",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the first element of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the first element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias head\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {*} Returns the first element of `array`.\r\n     * @example\r\n     *\r\n     * _.first([1, 2, 3]);\r\n     * // => 1\r\n     *\r\n     * _.first([]);\r\n     * // => undefined\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "flatten",
        "params": [
            [
                "Array",
                "array",
                "The array to flatten.\r "
            ],
            [
                "boolean",
                "[isDeep]",
                "Specify a deep flatten.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new flattened array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Flattens a nested array. If `isDeep` is `true` the array is recursively\r\n     * flattened, otherwise it is only flattened a single level.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to flatten.\r\n     * @param {boolean} [isDeep] Specify a deep flatten.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * _.flatten([1, [2, 3, [4]]]);\r\n     * // => [1, 2, 3, [4]]\r\n     *\r\n     * // using `isDeep`\r\n     * _.flatten([1, [2, 3, [4]]], true);\r\n     * // => [1, 2, 3, 4]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "flattenDeep",
        "params": [
            [
                "Array",
                "array",
                "The array to recursively flatten.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new flattened array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Recursively flattens a nested array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to recursively flatten.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * _.flattenDeep([1, [2, 3, [4]]]);\r\n     * // => [1, 2, 3, 4]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "indexOf",
        "params": [
            [
                "Array",
                "array",
                "The array to search.\r "
            ],
            [
                "*",
                "value",
                "The value to search for.\r "
            ],
            [
                "boolean|number",
                "[fromIndex=0]",
                "The index to search from or `true`\r to perform a binary search on a sorted array.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the index of the matched value, else `-1`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the index at which the first occurrence of `value` is found in `array`\r\n     * using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons. If `fromIndex` is negative, it is used as the offset\r\n     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`\r\n     * performs a faster binary search.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to search.\r\n     * @param {*} value The value to search for.\r\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\r\n     *  to perform a binary search on a sorted array.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.indexOf([1, 2, 1, 2], 2);\r\n     * // => 1\r\n     *\r\n     * // using `fromIndex`\r\n     * _.indexOf([1, 2, 1, 2], 2, 2);\r\n     * // => 3\r\n     *\r\n     * // performing a binary search\r\n     * _.indexOf([1, 1, 2, 2], 2, true);\r\n     * // => 2\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "initial",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets all but the last element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.initial([1, 2, 3]);\r\n     * // => [1, 2]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "intersection",
        "params": [
            [
                "...Array",
                "[arrays]",
                "The arrays to inspect.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of shared values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of unique values that are included in all of the provided\r\n     * arrays using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of shared values.\r\n     * @example\r\n     * _.intersection([1, 2], [4, 2], [2, 1]);\r\n     * // => [2]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "last",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the last element of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the last element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {*} Returns the last element of `array`.\r\n     * @example\r\n     *\r\n     * _.last([1, 2, 3]);\r\n     * // => 3\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "lastIndexOf",
        "params": [
            [
                "Array",
                "array",
                "The array to search.\r "
            ],
            [
                "*",
                "value",
                "The value to search for.\r "
            ],
            [
                "boolean|number",
                "[fromIndex=array.length-1]",
                "The index to search from\r or `true` to perform a binary search on a sorted array.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the index of the matched value, else `-1`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.indexOf` except that it iterates over elements of\r\n     * `array` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to search.\r\n     * @param {*} value The value to search for.\r\n     * @param {boolean|number} [fromIndex=array.length-1] The index to search from\r\n     *  or `true` to perform a binary search on a sorted array.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.lastIndexOf([1, 2, 1, 2], 2);\r\n     * // => 3\r\n     *\r\n     * // using `fromIndex`\r\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\r\n     * // => 1\r\n     *\r\n     * // performing a binary search\r\n     * _.lastIndexOf([1, 1, 2, 2], 2, true);\r\n     * // => 3\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "pull",
        "params": [
            [
                "Array",
                "array",
                "The array to modify.\r "
            ],
            [
                "...*",
                "[values]",
                "The values to remove.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Removes all provided values from `array` using\r\n     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * **Note:** Unlike `_.without`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {...*} [values] The values to remove.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3, 1, 2, 3];\r\n     *\r\n     * _.pull(array, 2, 3);\r\n     * console.log(array);\r\n     * // => [1, 1]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "pullAt",
        "params": [
            [
                "Array",
                "array",
                "The array to modify.\r "
            ],
            [
                "...(number|number[]",
                "[indexes]",
                "The indexes of elements to remove,\r specified as individual indexes or arrays of indexes.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of removed elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Removes elements from `array` corresponding to the given indexes and returns\r\n     * an array of the removed elements. Indexes may be specified as an array of\r\n     * indexes or as individual arguments.\r\n     *\r\n     * **Note:** Unlike `_.at`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove,\r\n     *  specified as individual indexes or arrays of indexes.\r\n     * @returns {Array} Returns the new array of removed elements.\r\n     * @example\r\n     *\r\n     * var array = [5, 10, 15, 20];\r\n     * var evens = _.pullAt(array, 1, 3);\r\n     *\r\n     * console.log(array);\r\n     * // => [5, 15]\r\n     *\r\n     * console.log(evens);\r\n     * // => [10, 20]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "remove",
        "params": [
            [
                "Array",
                "array",
                "The array to modify.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of removed elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Removes all elements from `array` that `predicate` returns truthy for\r\n     * and returns an array of the removed elements. The predicate is bound to\r\n     * `thisArg` and invoked with three arguments: (value, index, array).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * **Note:** Unlike `_.filter`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the new array of removed elements.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3, 4];\r\n     * var evens = _.remove(array, function(n) {\r\n     *   return n % 2 == 0;\r\n     * });\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 3]\r\n     *\r\n     * console.log(evens);\r\n     * // => [2, 4]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "tail"
        ],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "rest",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets all but the first element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias tail\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.rest([1, 2, 3]);\r\n     * // => [2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "slice",
        "params": [
            [
                "Array",
                "array",
                "The array to slice.\r "
            ],
            [
                "number",
                "[start=0]",
                "The start position.\r "
            ],
            [
                "number",
                "[end=array.length]",
                "The end position.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\r\n     *\r\n     * **Note:** This method is used instead of `Array#slice` to support node\r\n     * lists in IE < 9 and to ensure dense arrays are returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to slice.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sortedIndex",
        "params": [
            [
                "Array",
                "array",
                "The sorted array to inspect.\r "
            ],
            [
                "*",
                "value",
                "The value to evaluate.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the index at which `value` should be inserted\r\ninto `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Uses a binary search to determine the lowest index at which `value` should\r\n     * be inserted into `array` in order to maintain its sort order. If an iteratee\r\n     * function is provided it is invoked for `value` and each element of `array`\r\n     * to compute their sort ranking. The iteratee is bound to `thisArg` and\r\n     * invoked with one argument; (value).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     * @example\r\n     *\r\n     * _.sortedIndex([30, 50], 40);\r\n     * // => 1\r\n     *\r\n     * _.sortedIndex([4, 4, 5, 5], 5);\r\n     * // => 2\r\n     *\r\n     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };\r\n     *\r\n     * // using an iteratee function\r\n     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {\r\n     *   return this.data[word];\r\n     * }, dict);\r\n     * // => 1\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\r\n     * // => 1\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sortedLastIndex",
        "params": [
            [
                "Array",
                "array",
                "The sorted array to inspect.\r "
            ],
            [
                "*",
                "value",
                "The value to evaluate.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the index at which `value` should be inserted\r\ninto `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.sortedIndex` except that it returns the highest\r\n     * index at which `value` should be inserted into `array` in order to\r\n     * maintain its sort order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     * @example\r\n     *\r\n     * _.sortedLastIndex([4, 4, 5, 5], 5);\r\n     * // => 4\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "take",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "number",
                "[n=1]",
                "The number of elements to take.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` with `n` elements taken from the beginning.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to take.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.take([1, 2, 3]);\r\n     * // => [1]\r\n     *\r\n     * _.take([1, 2, 3], 2);\r\n     * // => [1, 2]\r\n     *\r\n     * _.take([1, 2, 3], 5);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * _.take([1, 2, 3], 0);\r\n     * // => []\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "takeRight",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "number",
                "[n=1]",
                "The number of elements to take.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` with `n` elements taken from the end.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to take.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.takeRight([1, 2, 3]);\r\n     * // => [3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 2);\r\n     * // => [2, 3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 5);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 0);\r\n     * // => []\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "takeRightWhile",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` with elements taken from the end. Elements are\r\n     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`\r\n     * and invoked with three arguments: (value, index, array).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.takeRightWhile([1, 2, 3], function(n) {\r\n     *   return n > 1;\r\n     * });\r\n     * // => [2, 3]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');\r\n     * // => ['pebbles']\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');\r\n     * // => ['fred', 'pebbles']\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.takeRightWhile(users, 'active'), 'user');\r\n     * // => []\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "takeWhile",
        "params": [
            [
                "Array",
                "array",
                "The array to query.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the slice of `array`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a slice of `array` with elements taken from the beginning. Elements\r\n     * are taken until `predicate` returns falsey. The predicate is bound to\r\n     * `thisArg` and invoked with three arguments: (value, index, array).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.takeWhile([1, 2, 3], function(n) {\r\n     *   return n < 3;\r\n     * });\r\n     * // => [1, 2]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false},\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');\r\n     * // => ['barney']\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.pluck(_.takeWhile(users, 'active', false), 'user');\r\n     * // => ['barney', 'fred']\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.takeWhile(users, 'active'), 'user');\r\n     * // => []\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "union",
        "params": [
            [
                "...Array",
                "[arrays]",
                "The arrays to inspect.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of combined values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of unique values, in order, from all of the provided arrays\r\n     * using [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of combined values.\r\n     * @example\r\n     *\r\n     * _.union([1, 2], [4, 2], [2, 1]);\r\n     * // => [1, 2, 4]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "unique"
        ],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "uniq",
        "params": [
            [
                "Array",
                "array",
                "The array to inspect.\r "
            ],
            [
                "boolean",
                "[isSorted]",
                "Specify the array is sorted.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new duplicate-value-free array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a duplicate-free version of an array, using\r\n     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons, in which only the first occurence of each element\r\n     * is kept. Providing `true` for `isSorted` performs a faster search algorithm\r\n     * for sorted arrays. If an iteratee function is provided it is invoked for\r\n     * each element in the array to generate the criterion by which uniqueness\r\n     * is computed. The `iteratee` is bound to `thisArg` and invoked with three\r\n     * arguments: (value, index, array).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias unique\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {boolean} [isSorted] Specify the array is sorted.\r\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array} Returns the new duplicate-value-free array.\r\n     * @example\r\n     *\r\n     * _.uniq([2, 1, 2]);\r\n     * // => [2, 1]\r\n     *\r\n     * // using `isSorted`\r\n     * _.uniq([1, 1, 2], true);\r\n     * // => [1, 2]\r\n     *\r\n     * // using an iteratee function\r\n     * _.uniq([1, 2.5, 1.5, 2], function(n) {\r\n     *   return this.floor(n);\r\n     * }, Math);\r\n     * // => [1, 2.5]\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\r\n     * // => [{ 'x': 1 }, { 'x': 2 }]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "unzip",
        "params": [
            [
                "Array",
                "array",
                "The array of grouped elements to process.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of regrouped elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.zip` except that it accepts an array of grouped\r\n     * elements and creates an array regrouping the elements to their pre-zip\r\n     * configuration.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array of grouped elements to process.\r\n     * @returns {Array} Returns the new array of regrouped elements.\r\n     * @example\r\n     *\r\n     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\r\n     * // => [['fred', 30, true], ['barney', 40, false]]\r\n     *\r\n     * _.unzip(zipped);\r\n     * // => [['fred', 'barney'], [30, 40], [true, false]]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "unzipWith",
        "params": [
            [
                "Array",
                "array",
                "The array of grouped elements to process.\r "
            ],
            [
                "Function",
                "[iteratee]",
                "The function to combine regrouped values.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of regrouped elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.unzip` except that it accepts an iteratee to specify\r\n     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`\r\n     * and invoked with four arguments: (accumulator, value, index, group).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array of grouped elements to process.\r\n     * @param {Function} [iteratee] The function to combine regrouped values.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array} Returns the new array of regrouped elements.\r\n     * @example\r\n     *\r\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\r\n     * // => [[1, 10, 100], [2, 20, 200]]\r\n     *\r\n     * _.unzipWith(zipped, _.add);\r\n     * // => [3, 30, 300]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "without",
        "params": [
            [
                "Array",
                "array",
                "The array to filter.\r "
            ],
            [
                "...*",
                "[values]",
                "The values to exclude.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of filtered values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array excluding all provided values using\r\n     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {Array} array The array to filter.\r\n     * @param {...*} [values] The values to exclude.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.without([1, 2, 1, 3], 1, 2);\r\n     * // => [3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "xor",
        "params": [
            [
                "...Array",
                "[arrays]",
                "The arrays to inspect.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\r\n     * of the provided arrays.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of values.\r\n     * @example\r\n     *\r\n     * _.xor([1, 2], [4, 2]);\r\n     * // => [1, 4]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "zip",
        "params": [
            [
                "...Array",
                "[arrays]",
                "The arrays to process.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of grouped elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of grouped elements, the first of which contains the first\r\n     * elements of the given arrays, the second of which contains the second elements\r\n     * of the given arrays, and so on.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to process.\r\n     * @returns {Array} Returns the new array of grouped elements.\r\n     * @example\r\n     *\r\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\r\n     * // => [['fred', 30, true], ['barney', 40, false]]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "object"
        ],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "zipObject",
        "params": [
            [
                "Array",
                "props",
                "The property names.\r "
            ],
            [
                "Array",
                "[values=[]]",
                "The property values.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The inverse of `_.pairs`; this method returns an object composed from arrays\r\n     * of property names and values. Provide either a single two dimensional array,\r\n     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names\r\n     * and one of corresponding values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias object\r\n     * @category Array\r\n     * @param {Array} props The property names.\r\n     * @param {Array} [values=[]] The property values.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * _.zipObject([['fred', 30], ['barney', 40]]);\r\n     * // => { 'fred': 30, 'barney': 40 }\r\n     *\r\n     * _.zipObject(['fred', 'barney'], [30, 40]);\r\n     * // => { 'fred': 30, 'barney': 40 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Array",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "zipWith",
        "params": [
            [
                "...Array",
                "[arrays]",
                "The arrays to process.\r "
            ],
            [
                "Function",
                "[iteratee]",
                "The function to combine grouped values.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of grouped elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.zip` except that it accepts an iteratee to specify\r\n     * how grouped values should be combined. The `iteratee` is bound to `thisArg`\r\n     * and invoked with four arguments: (accumulator, value, index, group).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to process.\r\n     * @param {Function} [iteratee] The function to combine grouped values.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array} Returns the new array of grouped elements.\r\n     * @example\r\n     *\r\n     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);\r\n     * // => [111, 222]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "chain",
        "params": [
            [
                "*",
                "value",
                "The value to wrap.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new `lodash` wrapper instance."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a `lodash` object that wraps `value` with explicit method\r\n     * chaining enabled.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @param {*} value The value to wrap.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36 },\r\n     *   { 'user': 'fred',    'age': 40 },\r\n     *   { 'user': 'pebbles', 'age': 1 }\r\n     * ];\r\n     *\r\n     * var youngest = _.chain(users)\r\n     *   .sortBy('age')\r\n     *   .map(function(chr) {\r\n     *     return chr.user + ' is ' + chr.age;\r\n     *   })\r\n     *   .first()\r\n     *   .value();\r\n     * // => 'pebbles is 1'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "tap",
        "params": [
            [
                "*",
                "value",
                "The value to provide to `interceptor`.\r "
            ],
            [
                "Function",
                "interceptor",
                "The function to invoke.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `interceptor`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns `value`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method invokes `interceptor` and returns `value`. The interceptor is\r\n     * bound to `thisArg` and invoked with one argument; (value). The purpose of\r\n     * this method is to \"tap into\" a method chain in order to perform operations\r\n     * on intermediate results within the chain.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @param {*} value The value to provide to `interceptor`.\r\n     * @param {Function} interceptor The function to invoke.\r\n     * @param {*} [thisArg] The `this` binding of `interceptor`.\r\n     * @returns {*} Returns `value`.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3])\r\n     *  .tap(function(array) {\r\n     *    array.pop();\r\n     *  })\r\n     *  .reverse()\r\n     *  .value();\r\n     * // => [2, 1]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "thru",
        "params": [
            [
                "*",
                "value",
                "The value to provide to `interceptor`.\r "
            ],
            [
                "Function",
                "interceptor",
                "The function to invoke.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `interceptor`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the result of `interceptor`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @param {*} value The value to provide to `interceptor`.\r\n     * @param {Function} interceptor The function to invoke.\r\n     * @param {*} [thisArg] The `this` binding of `interceptor`.\r\n     * @returns {*} Returns the result of `interceptor`.\r\n     * @example\r\n     *\r\n     * _('  abc  ')\r\n     *  .chain()\r\n     *  .trim()\r\n     *  .thru(function(value) {\r\n     *    return [value];\r\n     *  })\r\n     *  .value();\r\n     * // => ['abc']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": true,
        "isPrivate": false,
        "isStatic": false,
        "member": "_",
        "name": "chain",
        "params": [],
        "returns": [
            "Object",
            " Returns the new `lodash` wrapper instance."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Enables explicit method chaining on the wrapper object.\r\n     *\r\n     * @name chain\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * // without explicit chaining\r\n     * _(users).first();\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     *\r\n     * // with explicit chaining\r\n     * _(users).chain()\r\n     *   .first()\r\n     *   .pick('user')\r\n     *   .value();\r\n     * // => { 'user': 'barney' }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": true,
        "isPrivate": false,
        "isStatic": false,
        "member": "_",
        "name": "commit",
        "params": [],
        "returns": [
            "Object",
            " Returns the new `lodash` wrapper instance."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Executes the chained sequence and returns the wrapped result.\r\n     *\r\n     * @name commit\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2];\r\n     * var wrapper = _(array).push(3);\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 2]\r\n     *\r\n     * wrapper = wrapper.commit();\r\n     * console.log(array);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * wrapper.last();\r\n     * // => 3\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": true,
        "isPrivate": false,
        "isStatic": false,
        "member": "_",
        "name": "plant",
        "params": [],
        "returns": [
            "Object",
            " Returns the new `lodash` wrapper instance."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a clone of the chained sequence planting `value` as the wrapped value.\r\n     *\r\n     * @name plant\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2];\r\n     * var wrapper = _(array).map(function(value) {\r\n     *   return Math.pow(value, 2);\r\n     * });\r\n     *\r\n     * var other = [3, 4];\r\n     * var otherWrapper = wrapper.plant(other);\r\n     *\r\n     * otherWrapper.value();\r\n     * // => [9, 16]\r\n     *\r\n     * wrapper.value();\r\n     * // => [1, 4]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": true,
        "isPrivate": false,
        "isStatic": false,
        "member": "_",
        "name": "reverse",
        "params": [],
        "returns": [
            "Object",
            " Returns the new reversed `lodash` wrapper instance."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Reverses the wrapped array so the first element becomes the last, the\r\n     * second element becomes the second to last, and so on.\r\n     *\r\n     * **Note:** This method mutates the wrapped array.\r\n     *\r\n     * @name reverse\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @returns {Object} Returns the new reversed `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _(array).reverse().value()\r\n     * // => [3, 2, 1]\r\n     *\r\n     * console.log(array);\r\n     * // => [3, 2, 1]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": true,
        "isPrivate": false,
        "isStatic": false,
        "member": "_",
        "name": "toString",
        "params": [],
        "returns": [
            "string",
            " Returns the coerced string value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Produces the result of coercing the unwrapped value to a string.\r\n     *\r\n     * @name toString\r\n     * @memberOf _\r\n     * @category Chain\r\n     * @returns {string} Returns the coerced string value.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3]).toString();\r\n     * // => '1,2,3'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "run",
            "toJSON",
            "valueOf"
        ],
        "category": "Chain",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": true,
        "isPrivate": false,
        "isStatic": false,
        "member": "_",
        "name": "value",
        "params": [],
        "returns": [
            "*",
            " Returns the resolved unwrapped value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Executes the chained sequence to extract the unwrapped value.\r\n     *\r\n     * @name value\r\n     * @memberOf _\r\n     * @alias run, toJSON, valueOf\r\n     * @category Chain\r\n     * @returns {*} Returns the resolved unwrapped value.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3]).value();\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "at",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "...(number|number[]|string|string[]",
                "[props]",
                "The property names\r or indexes of elements to pick, specified individually or in arrays.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of picked elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of elements corresponding to the given keys, or indexes,\r\n     * of `collection`. Keys may be specified as individual arguments or as arrays\r\n     * of keys.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {...(number|number[]|string|string[])} [props] The property names\r\n     *  or indexes of elements to pick, specified individually or in arrays.\r\n     * @returns {Array} Returns the new array of picked elements.\r\n     * @example\r\n     *\r\n     * _.at(['a', 'b', 'c'], [0, 2]);\r\n     * // => ['a', 'c']\r\n     *\r\n     * _.at(['barney', 'fred', 'pebbles'], 0, 2);\r\n     * // => ['barney', 'pebbles']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "countBy",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the composed aggregate object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` through `iteratee`. The corresponding value\r\n     * of each key is the number of times the key was returned by `iteratee`.\r\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * _.countBy([4.3, 6.1, 6.4], function(n) {\r\n     *   return Math.floor(n);\r\n     * });\r\n     * // => { '4': 1, '6': 2 }\r\n     *\r\n     * _.countBy([4.3, 6.1, 6.4], function(n) {\r\n     *   return this.floor(n);\r\n     * }, Math);\r\n     * // => { '4': 1, '6': 2 }\r\n     *\r\n     * _.countBy(['one', 'two', 'three'], 'length');\r\n     * // => { '3': 2, '5': 1 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "all"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "every",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if all elements pass the predicate check,\r\nelse `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\r\n     * The predicate is bound to `thisArg` and invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias all\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.every([true, 1, null, 'yes'], Boolean);\r\n     * // => false\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'active': false },\r\n     *   { 'user': 'fred',   'active': false }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.every(users, { 'user': 'barney', 'active': false });\r\n     * // => false\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.every(users, 'active', false);\r\n     * // => true\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.every(users, 'active');\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "select"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "filter",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new filtered array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Iterates over elements of `collection`, returning an array of all elements\r\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and\r\n     * invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias select\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @example\r\n     *\r\n     * _.filter([4, 5, 6], function(n) {\r\n     *   return n % 2 == 0;\r\n     * });\r\n     * // => [4, 6]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');\r\n     * // => ['barney']\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.pluck(_.filter(users, 'active', false), 'user');\r\n     * // => ['fred']\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.filter(users, 'active'), 'user');\r\n     * // => ['barney']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "detect"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "find",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to search.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the matched element, else `undefined`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Iterates over elements of `collection`, returning the first element\r\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and\r\n     * invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias detect\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to search.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {*} Returns the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36, 'active': true },\r\n     *   { 'user': 'fred',    'age': 40, 'active': false },\r\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\r\n     * ];\r\n     *\r\n     * _.result(_.find(users, function(chr) {\r\n     *   return chr.age < 40;\r\n     * }), 'user');\r\n     * // => 'barney'\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');\r\n     * // => 'pebbles'\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.result(_.find(users, 'active', false), 'user');\r\n     * // => 'fred'\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.result(_.find(users, 'active'), 'user');\r\n     * // => 'barney'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "findLast",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to search.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the matched element, else `undefined`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.find` except that it iterates over elements of\r\n     * `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to search.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {*} Returns the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * _.findLast([1, 2, 3, 4], function(n) {\r\n     *   return n % 2 == 1;\r\n     * });\r\n     * // => 3\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "findWhere",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to search.\r "
            ],
            [
                "Object",
                "source",
                "The object of property values to match.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the matched element, else `undefined`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Performs a deep comparison between each element in `collection` and the\r\n     * source object, returning the first element that has equivalent property\r\n     * values.\r\n     *\r\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\r\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\r\n     * their own, not inherited, enumerable properties. For comparing a single\r\n     * own or inherited property value see `_.matchesProperty`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to search.\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {*} Returns the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');\r\n     * // => 'barney'\r\n     *\r\n     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');\r\n     * // => 'fred'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "each"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "forEach",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array|Object|string",
            " Returns `collection`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Iterates over elements of `collection` invoking `iteratee` for each element.\r\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\r\n     * (value, index|key, collection). Iteratee functions may exit iteration early\r\n     * by explicitly returning `false`.\r\n     *\r\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\r\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\r\n     * may be used for object iteration.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias each\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array|Object|string} Returns `collection`.\r\n     * @example\r\n     *\r\n     * _([1, 2]).forEach(function(n) {\r\n     *   console.log(n);\r\n     * }).value();\r\n     * // => logs each value from left to right and returns the array\r\n     *\r\n     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\r\n     *   console.log(n, key);\r\n     * });\r\n     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "eachRight"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "forEachRight",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array|Object|string",
            " Returns `collection`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.forEach` except that it iterates over elements of\r\n     * `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias eachRight\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array|Object|string} Returns `collection`.\r\n     * @example\r\n     *\r\n     * _([1, 2]).forEachRight(function(n) {\r\n     *   console.log(n);\r\n     * }).value();\r\n     * // => logs each value from right to left and returns the array\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "groupBy",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the composed aggregate object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` through `iteratee`. The corresponding value\r\n     * of each key is an array of the elements responsible for generating the key.\r\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {\r\n     *   return Math.floor(n);\r\n     * });\r\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\r\n     *\r\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {\r\n     *   return this.floor(n);\r\n     * }, Math);\r\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.groupBy(['one', 'two', 'three'], 'length');\r\n     * // => { '3': ['one', 'two'], '5': ['three'] }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "contains",
            "include"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "includes",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to search.\r "
            ],
            [
                "*",
                "target",
                "The value to search for.\r "
            ],
            [
                "number",
                "[fromIndex=0]",
                "The index to search from.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if a matching element is found, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is in `collection` using\r\n     * [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\r\n     * for equality comparisons. If `fromIndex` is negative, it is used as the offset\r\n     * from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias contains, include\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to search.\r\n     * @param {*} target The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if a matching element is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\r\n     * // => true\r\n     *\r\n     * _.includes('pebbles', 'eb');\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "indexBy",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the composed aggregate object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` through `iteratee`. The corresponding value\r\n     * of each key is the last element responsible for generating the key. The\r\n     * iteratee function is bound to `thisArg` and invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * var keyData = [\r\n     *   { 'dir': 'left', 'code': 97 },\r\n     *   { 'dir': 'right', 'code': 100 }\r\n     * ];\r\n     *\r\n     * _.indexBy(keyData, 'dir');\r\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\r\n     *\r\n     * _.indexBy(keyData, function(object) {\r\n     *   return String.fromCharCode(object.code);\r\n     * });\r\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\r\n     *\r\n     * _.indexBy(keyData, function(object) {\r\n     *   return this.fromCharCode(object.code);\r\n     * }, String);\r\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "invoke",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Array|Function|string",
                "path",
                "The path of the method to invoke or\r the function invoked per iteration.\r "
            ],
            [
                "...*",
                "[args]",
                "The arguments to invoke the method with.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of results."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Invokes the method at `path` of each element in `collection`, returning\r\n     * an array of the results of each invoked method. Any additional arguments\r\n     * are provided to each invoked method. If `methodName` is a function it is\r\n     * invoked for, and `this` bound to, each element in `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Array|Function|string} path The path of the method to invoke or\r\n     *  the function invoked per iteration.\r\n     * @param {...*} [args] The arguments to invoke the method with.\r\n     * @returns {Array} Returns the array of results.\r\n     * @example\r\n     *\r\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\r\n     * // => [[1, 5, 7], [1, 2, 3]]\r\n     *\r\n     * _.invoke([123, 456], String.prototype.split, '');\r\n     * // => [['1', '2', '3'], ['4', '5', '6']]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "collect"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "map",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new mapped array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of values by running each element in `collection` through\r\n     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three\r\n     * arguments: (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * Many lodash methods are guarded to work as iteratees for methods like\r\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\r\n     *\r\n     * The guarded methods are:\r\n     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,\r\n     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,\r\n     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,\r\n     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,\r\n     * `sum`, `uniq`, and `words`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias collect\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array} Returns the new mapped array.\r\n     * @example\r\n     *\r\n     * function timesThree(n) {\r\n     *   return n * 3;\r\n     * }\r\n     *\r\n     * _.map([1, 2], timesThree);\r\n     * // => [3, 6]\r\n     *\r\n     * _.map({ 'a': 1, 'b': 2 }, timesThree);\r\n     * // => [3, 6] (iteration order is not guaranteed)\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney' },\r\n     *   { 'user': 'fred' }\r\n     * ];\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.map(users, 'user');\r\n     * // => ['barney', 'fred']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "partition",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of grouped elements."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of elements split into two groups, the first of which\r\n     * contains elements `predicate` returns truthy for, while the second of which\r\n     * contains elements `predicate` returns falsey for. The predicate is bound\r\n     * to `thisArg` and invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the array of grouped elements.\r\n     * @example\r\n     *\r\n     * _.partition([1, 2, 3], function(n) {\r\n     *   return n % 2;\r\n     * });\r\n     * // => [[1, 3], [2]]\r\n     *\r\n     * _.partition([1.2, 2.3, 3.4], function(n) {\r\n     *   return this.floor(n) % 2;\r\n     * }, Math);\r\n     * // => [[1.2, 3.4], [2.3]]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36, 'active': false },\r\n     *   { 'user': 'fred',    'age': 40, 'active': true },\r\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\r\n     * ];\r\n     *\r\n     * var mapper = function(array) {\r\n     *   return _.pluck(array, 'user');\r\n     * };\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);\r\n     * // => [['pebbles'], ['barney', 'fred']]\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.map(_.partition(users, 'active', false), mapper);\r\n     * // => [['barney', 'pebbles'], ['fred']]\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.map(_.partition(users, 'active'), mapper);\r\n     * // => [['fred'], ['barney', 'pebbles']]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "pluck",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Array|string",
                "path",
                "The path of the property to pluck.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the property values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the property value of `path` from all elements in `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Array|string} path The path of the property to pluck.\r\n     * @returns {Array} Returns the property values.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * _.pluck(users, 'user');\r\n     * // => ['barney', 'fred']\r\n     *\r\n     * var userIndex = _.indexBy(users, 'user');\r\n     * _.pluck(userIndex, 'age');\r\n     * // => [36, 40] (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "foldl",
            "inject"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "reduce",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[accumulator]",
                "The initial value.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the accumulated value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Reduces `collection` to a value which is the accumulated result of running\r\n     * each element in `collection` through `iteratee`, where each successive\r\n     * invocation is supplied the return value of the previous. If `accumulator`\r\n     * is not provided the first element of `collection` is used as the initial\r\n     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:\r\n     * (accumulator, value, index|key, collection).\r\n     *\r\n     * Many lodash methods are guarded to work as iteratees for methods like\r\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\r\n     *\r\n     * The guarded methods are:\r\n     * `assign`, `defaults`, `includes`, `merge`, `sortByAll`, and `sortByOrder`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias foldl, inject\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The initial value.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @example\r\n     *\r\n     * _.reduce([1, 2], function(total, n) {\r\n     *   return total + n;\r\n     * });\r\n     * // => 3\r\n     *\r\n     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {\r\n     *   result[key] = n * 3;\r\n     *   return result;\r\n     * }, {});\r\n     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "foldr"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "reduceRight",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[accumulator]",
                "The initial value.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the accumulated value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.reduce` except that it iterates over elements of\r\n     * `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias foldr\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The initial value.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @example\r\n     *\r\n     * var array = [[0, 1], [2, 3], [4, 5]];\r\n     *\r\n     * _.reduceRight(array, function(flattened, other) {\r\n     *   return flattened.concat(other);\r\n     * }, []);\r\n     * // => [4, 5, 2, 3, 0, 1]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "reject",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new filtered array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The opposite of `_.filter`; this method returns the elements of `collection`\r\n     * that `predicate` does **not** return truthy for.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @example\r\n     *\r\n     * _.reject([1, 2, 3, 4], function(n) {\r\n     *   return n % 2 == 0;\r\n     * });\r\n     * // => [1, 3]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': false },\r\n     *   { 'user': 'fred',   'age': 40, 'active': true }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');\r\n     * // => ['barney']\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.pluck(_.reject(users, 'active', false), 'user');\r\n     * // => ['fred']\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.reject(users, 'active'), 'user');\r\n     * // => ['barney']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sample",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to sample.\r "
            ],
            [
                "number",
                "[n]",
                "The number of elements to sample.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the random sample(s)."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets a random element or `n` random elements from a collection.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to sample.\r\n     * @param {number} [n] The number of elements to sample.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {*} Returns the random sample(s).\r\n     * @example\r\n     *\r\n     * _.sample([1, 2, 3, 4]);\r\n     * // => 2\r\n     *\r\n     * _.sample([1, 2, 3, 4], 2);\r\n     * // => [3, 1]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "shuffle",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to shuffle.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new shuffled array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of shuffled values, using a version of the\r\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to shuffle.\r\n     * @returns {Array} Returns the new shuffled array.\r\n     * @example\r\n     *\r\n     * _.shuffle([1, 2, 3, 4]);\r\n     * // => [4, 1, 3, 2]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "size",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to inspect.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the size of `collection`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the size of `collection` by returning its length for array-like\r\n     * values or the number of own enumerable properties for objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @returns {number} Returns the size of `collection`.\r\n     * @example\r\n     *\r\n     * _.size([1, 2, 3]);\r\n     * // => 3\r\n     *\r\n     * _.size({ 'a': 1, 'b': 2 });\r\n     * // => 2\r\n     *\r\n     * _.size('pebbles');\r\n     * // => 7\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "any"
        ],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "some",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if any element passes the predicate check,\r\nelse `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\r\n     * The function returns as soon as it finds a passing value and does not iterate\r\n     * over the entire collection. The predicate is bound to `thisArg` and invoked\r\n     * with three arguments: (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias any\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.some([null, 0, 'yes', false], Boolean);\r\n     * // => true\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'active': true },\r\n     *   { 'user': 'fred',   'active': false }\r\n     * ];\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.some(users, { 'user': 'barney', 'active': false });\r\n     * // => false\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.some(users, 'active', false);\r\n     * // => true\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.some(users, 'active');\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sortBy",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new sorted array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of elements, sorted in ascending order by the results of\r\n     * running each element in a collection through `iteratee`. This method performs\r\n     * a stable sort, that is, it preserves the original sort order of equal elements.\r\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array} Returns the new sorted array.\r\n     * @example\r\n     *\r\n     * _.sortBy([1, 2, 3], function(n) {\r\n     *   return Math.sin(n);\r\n     * });\r\n     * // => [3, 1, 2]\r\n     *\r\n     * _.sortBy([1, 2, 3], function(n) {\r\n     *   return this.sin(n);\r\n     * }, Math);\r\n     * // => [3, 1, 2]\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'fred' },\r\n     *   { 'user': 'pebbles' },\r\n     *   { 'user': 'barney' }\r\n     * ];\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.pluck(_.sortBy(users, 'user'), 'user');\r\n     * // => ['barney', 'fred', 'pebbles']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sortByAll",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "...(Function|Function[]|Object|Object[]|string|string[]",
                "iteratees",
                " The iteratees to sort by, specified as individual values or arrays of values.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new sorted array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.sortBy` except that it can sort by multiple iteratees\r\n     * or property names.\r\n     *\r\n     * If a property name is provided for an iteratee the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If an object is provided for an iteratee the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees\r\n     *  The iteratees to sort by, specified as individual values or arrays of values.\r\n     * @returns {Array} Returns the new sorted array.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'fred',   'age': 48 },\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 42 },\r\n     *   { 'user': 'barney', 'age': 34 }\r\n     * ];\r\n     *\r\n     * _.map(_.sortByAll(users, ['user', 'age']), _.values);\r\n     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\r\n     *\r\n     * _.map(_.sortByAll(users, 'user', function(chr) {\r\n     *   return Math.floor(chr.age / 10);\r\n     * }), _.values);\r\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sortByOrder",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function[]|Object[]|string[]",
                "iteratees",
                "The iteratees to sort by.\r "
            ],
            [
                "boolean[]",
                "orders",
                "The sort orders of `iteratees`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new sorted array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.sortByAll` except that it allows specifying the\r\n     * sort orders of the iteratees to sort by. A truthy value in `orders` will\r\n     * sort the corresponding property name in ascending order while a falsey\r\n     * value will sort it in descending order.\r\n     *\r\n     * If a property name is provided for an iteratee the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If an object is provided for an iteratee the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\r\n     * @param {boolean[]} orders The sort orders of `iteratees`.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\r\n     * @returns {Array} Returns the new sorted array.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'fred',   'age': 48 },\r\n     *   { 'user': 'barney', 'age': 34 },\r\n     *   { 'user': 'fred',   'age': 42 },\r\n     *   { 'user': 'barney', 'age': 36 }\r\n     * ];\r\n     *\r\n     * // sort by `user` in ascending order and by `age` in descending order\r\n     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);\r\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Collection",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "where",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to search.\r "
            ],
            [
                "Object",
                "source",
                "The object of property values to match.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new filtered array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Performs a deep comparison between each element in `collection` and the\r\n     * source object, returning an array of all elements that have equivalent\r\n     * property values.\r\n     *\r\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\r\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\r\n     * their own, not inherited, enumerable properties. For comparing a single\r\n     * own or inherited property value see `_.matchesProperty`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to search.\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },\r\n     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }\r\n     * ];\r\n     *\r\n     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');\r\n     * // => ['barney']\r\n     *\r\n     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');\r\n     * // => ['fred']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Date",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "now",
        "params": [],
        "returns": [],
        "type": "unknown",
        "comment": "/**\r\n     * Gets the number of milliseconds that have elapsed since the Unix epoch\r\n     * (1 January 1970 00:00:00 UTC).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Date\r\n     * @example\r\n     *\r\n     * _.defer(function(stamp) {\r\n     *   console.log(_.now() - stamp);\r\n     * }, _.now());\r\n     * // => logs the number of milliseconds it took for the deferred function to be invoked\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "after",
        "params": [
            [
                "number",
                "n",
                "The number of calls before `func` is invoked.\r "
            ],
            [
                "Function",
                "func",
                "The function to restrict.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new restricted function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The opposite of `_.before`; this method creates a function that invokes\r\n     * `func` once it is called `n` or more times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {number} n The number of calls before `func` is invoked.\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * var saves = ['profile', 'settings'];\r\n     *\r\n     * var done = _.after(saves.length, function() {\r\n     *   console.log('done saving!');\r\n     * });\r\n     *\r\n     * _.forEach(saves, function(type) {\r\n     *   asyncSave({ 'type': type, 'complete': done });\r\n     * });\r\n     * // => logs 'done saving!' after the two async saves have completed\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "ary",
        "params": [
            [
                "Function",
                "func",
                "The function to cap arguments for.\r "
            ],
            [
                "number",
                "[n=func.length]",
                "The arity cap.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that accepts up to `n` arguments ignoring any\r\n     * additional arguments.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to cap arguments for.\r\n     * @param {number} [n=func.length] The arity cap.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\r\n     * // => [6, 8, 10]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "before",
        "params": [
            [
                "number",
                "n",
                "The number of calls at which `func` is no longer invoked.\r "
            ],
            [
                "Function",
                "func",
                "The function to restrict.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new restricted function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func`, with the `this` binding and arguments\r\n     * of the created function, while it is called less than `n` times. Subsequent\r\n     * calls to the created function return the result of the last `func` invocation.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {number} n The number of calls at which `func` is no longer invoked.\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * jQuery('#add').on('click', _.before(5, addContactToList));\r\n     * // => allows adding up to 4 contacts to the list\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "bind",
        "params": [
            [
                "Function",
                "func",
                "The function to bind.\r "
            ],
            [
                "*",
                "thisArg",
                "The `this` binding of `func`.\r "
            ],
            [
                "...*",
                "[partials]",
                "The arguments to be partially applied.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new bound function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\r\n     * and prepends any additional `_.bind` arguments to those provided to the\r\n     * bound function.\r\n     *\r\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\r\n     * may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** Unlike native `Function#bind` this method does not set the \"length\"\r\n     * property of bound functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to bind.\r\n     * @param {*} thisArg The `this` binding of `func`.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new bound function.\r\n     * @example\r\n     *\r\n     * var greet = function(greeting, punctuation) {\r\n     *   return greeting + ' ' + this.user + punctuation;\r\n     * };\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     *\r\n     * var bound = _.bind(greet, object, 'hi');\r\n     * bound('!');\r\n     * // => 'hi fred!'\r\n     *\r\n     * // using placeholders\r\n     * var bound = _.bind(greet, object, _, '!');\r\n     * bound('hi');\r\n     * // => 'hi fred!'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "bindAll",
        "params": [
            [
                "Object",
                "object",
                "The object to bind and assign the bound methods to.\r "
            ],
            [
                "...(string|string[]",
                "[methodNames]",
                "The object method names to bind,\r specified as individual method names or arrays of method names.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Binds methods of an object to the object itself, overwriting the existing\r\n     * method. Method names may be specified as individual arguments or as arrays\r\n     * of method names. If no method names are provided all enumerable function\r\n     * properties, own and inherited, of `object` are bound.\r\n     *\r\n     * **Note:** This method does not set the \"length\" property of bound functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Object} object The object to bind and assign the bound methods to.\r\n     * @param {...(string|string[])} [methodNames] The object method names to bind,\r\n     *  specified as individual method names or arrays of method names.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var view = {\r\n     *   'label': 'docs',\r\n     *   'onClick': function() {\r\n     *     console.log('clicked ' + this.label);\r\n     *   }\r\n     * };\r\n     *\r\n     * _.bindAll(view);\r\n     * jQuery('#docs').on('click', view.onClick);\r\n     * // => logs 'clicked docs' when the element is clicked\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "bindKey",
        "params": [
            [
                "Object",
                "object",
                "The object the method belongs to.\r "
            ],
            [
                "string",
                "key",
                "The key of the method.\r "
            ],
            [
                "...*",
                "[partials]",
                "The arguments to be partially applied.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new bound function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes the method at `object[key]` and prepends\r\n     * any additional `_.bindKey` arguments to those provided to the bound function.\r\n     *\r\n     * This method differs from `_.bind` by allowing bound functions to reference\r\n     * methods that may be redefined or don't yet exist.\r\n     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\r\n     * for more details.\r\n     *\r\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Object} object The object the method belongs to.\r\n     * @param {string} key The key of the method.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new bound function.\r\n     * @example\r\n     *\r\n     * var object = {\r\n     *   'user': 'fred',\r\n     *   'greet': function(greeting, punctuation) {\r\n     *     return greeting + ' ' + this.user + punctuation;\r\n     *   }\r\n     * };\r\n     *\r\n     * var bound = _.bindKey(object, 'greet', 'hi');\r\n     * bound('!');\r\n     * // => 'hi fred!'\r\n     *\r\n     * object.greet = function(greeting, punctuation) {\r\n     *   return greeting + 'ya ' + this.user + punctuation;\r\n     * };\r\n     *\r\n     * bound('!');\r\n     * // => 'hiya fred!'\r\n     *\r\n     * // using placeholders\r\n     * var bound = _.bindKey(object, 'greet', _, '!');\r\n     * bound('hi');\r\n     * // => 'hiya fred!'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "curry",
        "params": [
            [
                "Function",
                "func",
                "The function to curry.\r "
            ],
            [
                "number",
                "[arity=func.length]",
                "The arity of `func`.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new curried function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that accepts one or more arguments of `func` that when\r\n     * called either invokes `func` returning its result, if all `func` arguments\r\n     * have been provided, or returns a function that accepts one or more of the\r\n     * remaining `func` arguments, and so on. The arity of `func` may be specified\r\n     * if `func.length` is not sufficient.\r\n     *\r\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\r\n     * may be used as a placeholder for provided arguments.\r\n     *\r\n     * **Note:** This method does not set the \"length\" property of curried functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to curry.\r\n     * @param {number} [arity=func.length] The arity of `func`.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Function} Returns the new curried function.\r\n     * @example\r\n     *\r\n     * var abc = function(a, b, c) {\r\n     *   return [a, b, c];\r\n     * };\r\n     *\r\n     * var curried = _.curry(abc);\r\n     *\r\n     * curried(1)(2)(3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(1, 2)(3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(1, 2, 3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * // using placeholders\r\n     * curried(1)(_, 3)(2);\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "curryRight",
        "params": [
            [
                "Function",
                "func",
                "The function to curry.\r "
            ],
            [
                "number",
                "[arity=func.length]",
                "The arity of `func`.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new curried function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.curry` except that arguments are applied to `func`\r\n     * in the manner of `_.partialRight` instead of `_.partial`.\r\n     *\r\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for provided arguments.\r\n     *\r\n     * **Note:** This method does not set the \"length\" property of curried functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to curry.\r\n     * @param {number} [arity=func.length] The arity of `func`.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Function} Returns the new curried function.\r\n     * @example\r\n     *\r\n     * var abc = function(a, b, c) {\r\n     *   return [a, b, c];\r\n     * };\r\n     *\r\n     * var curried = _.curryRight(abc);\r\n     *\r\n     * curried(3)(2)(1);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(2, 3)(1);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(1, 2, 3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * // using placeholders\r\n     * curried(3)(1, _)(2);\r\n     * // => [1, 2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "debounce",
        "params": [
            [
                "Function",
                "func",
                "The function to debounce.\r "
            ],
            [
                "number",
                "[wait=0]",
                "The number of milliseconds to delay.\r "
            ],
            [
                "Object",
                "[options]",
                "The options object.\r "
            ],
            [
                "boolean",
                "[options.leading=false]",
                "Specify invoking on the leading\r edge of the timeout.\r "
            ],
            [
                "number",
                "[options.maxWait]",
                "The maximum time `func` is allowed to be\r delayed before it is invoked.\r "
            ],
            [
                "boolean",
                "[options.trailing=true]",
                "Specify invoking on the trailing\r edge of the timeout.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new debounced function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a debounced function that delays invoking `func` until after `wait`\r\n     * milliseconds have elapsed since the last time the debounced function was\r\n     * invoked. The debounced function comes with a `cancel` method to cancel\r\n     * delayed invocations. Provide an options object to indicate that `func`\r\n     * should be invoked on the leading and/or trailing edge of the `wait` timeout.\r\n     * Subsequent calls to the debounced function return the result of the last\r\n     * `func` invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\r\n     * on the trailing edge of the timeout only if the the debounced function is\r\n     * invoked more than once during the `wait` timeout.\r\n     *\r\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\r\n     * for details over the differences between `_.debounce` and `_.throttle`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to debounce.\r\n     * @param {number} [wait=0] The number of milliseconds to delay.\r\n     * @param {Object} [options] The options object.\r\n     * @param {boolean} [options.leading=false] Specify invoking on the leading\r\n     *  edge of the timeout.\r\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be\r\n     *  delayed before it is invoked.\r\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing\r\n     *  edge of the timeout.\r\n     * @returns {Function} Returns the new debounced function.\r\n     * @example\r\n     *\r\n     * // avoid costly calculations while the window size is in flux\r\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n     *\r\n     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls\r\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\r\n     *   'leading': true,\r\n     *   'trailing': false\r\n     * }));\r\n     *\r\n     * // ensure `batchLog` is invoked once after 1 second of debounced calls\r\n     * var source = new EventSource('/stream');\r\n     * jQuery(source).on('message', _.debounce(batchLog, 250, {\r\n     *   'maxWait': 1000\r\n     * }));\r\n     *\r\n     * // cancel a debounced call\r\n     * var todoChanges = _.debounce(batchLog, 1000);\r\n     * Object.observe(models.todo, todoChanges);\r\n     *\r\n     * Object.observe(models, function(changes) {\r\n     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {\r\n     *     todoChanges.cancel();\r\n     *   }\r\n     * }, ['delete']);\r\n     *\r\n     * // ...at some point `models.todo` is changed\r\n     * models.todo.completed = true;\r\n     *\r\n     * // ...before 1 second has passed `models.todo` is deleted\r\n     * // which cancels the debounced `todoChanges` call\r\n     * delete models.todo;\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "defer",
        "params": [
            [
                "Function",
                "func",
                "The function to defer.\r "
            ],
            [
                "...*",
                "[args]",
                "The arguments to invoke the function with.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the timer id."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Defers invoking the `func` until the current call stack has cleared. Any\r\n     * additional arguments are provided to `func` when it is invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to defer.\r\n     * @param {...*} [args] The arguments to invoke the function with.\r\n     * @returns {number} Returns the timer id.\r\n     * @example\r\n     *\r\n     * _.defer(function(text) {\r\n     *   console.log(text);\r\n     * }, 'deferred');\r\n     * // logs 'deferred' after one or more milliseconds\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "delay",
        "params": [
            [
                "Function",
                "func",
                "The function to delay.\r "
            ],
            [
                "number",
                "wait",
                "The number of milliseconds to delay invocation.\r "
            ],
            [
                "...*",
                "[args]",
                "The arguments to invoke the function with.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the timer id."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\r\n     * provided to `func` when it is invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to delay.\r\n     * @param {number} wait The number of milliseconds to delay invocation.\r\n     * @param {...*} [args] The arguments to invoke the function with.\r\n     * @returns {number} Returns the timer id.\r\n     * @example\r\n     *\r\n     * _.delay(function(text) {\r\n     *   console.log(text);\r\n     * }, 1000, 'later');\r\n     * // => logs 'later' after one second\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "flow",
        "params": [
            [
                "...Function",
                "[funcs]",
                "Functions to invoke.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that returns the result of invoking the provided\r\n     * functions with the `this` binding of the created function, where each\r\n     * successive invocation is supplied the return value of the previous.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {...Function} [funcs] Functions to invoke.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var addSquare = _.flow(_.add, square);\r\n     * addSquare(1, 2);\r\n     * // => 9\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "backflow",
            "compose"
        ],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "flowRight",
        "params": [
            [
                "...Function",
                "[funcs]",
                "Functions to invoke.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.flow` except that it creates a function that\r\n     * invokes the provided functions from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias backflow, compose\r\n     * @category Function\r\n     * @param {...Function} [funcs] Functions to invoke.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var addSquare = _.flowRight(square, _.add);\r\n     * addSquare(1, 2);\r\n     * // => 9\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "memoize",
        "params": [
            [
                "Function",
                "func",
                "The function to have its output memoized.\r "
            ],
            [
                "Function",
                "[resolver]",
                "The function to resolve the cache key.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new memoizing function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that memoizes the result of `func`. If `resolver` is\r\n     * provided it determines the cache key for storing the result based on the\r\n     * arguments provided to the memoized function. By default, the first argument\r\n     * provided to the memoized function is coerced to a string and used as the\r\n     * cache key. The `func` is invoked with the `this` binding of the memoized\r\n     * function.\r\n     *\r\n     * **Note:** The cache is exposed as the `cache` property on the memoized\r\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\r\n     * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)\r\n     * method interface of `get`, `has`, and `set`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to have its output memoized.\r\n     * @param {Function} [resolver] The function to resolve the cache key.\r\n     * @returns {Function} Returns the new memoizing function.\r\n     * @example\r\n     *\r\n     * var upperCase = _.memoize(function(string) {\r\n     *   return string.toUpperCase();\r\n     * });\r\n     *\r\n     * upperCase('fred');\r\n     * // => 'FRED'\r\n     *\r\n     * // modifying the result cache\r\n     * upperCase.cache.set('fred', 'BARNEY');\r\n     * upperCase('fred');\r\n     * // => 'BARNEY'\r\n     *\r\n     * // replacing `_.memoize.Cache`\r\n     * var object = { 'user': 'fred' };\r\n     * var other = { 'user': 'barney' };\r\n     * var identity = _.memoize(_.identity);\r\n     *\r\n     * identity(object);\r\n     * // => { 'user': 'fred' }\r\n     * identity(other);\r\n     * // => { 'user': 'fred' }\r\n     *\r\n     * _.memoize.Cache = WeakMap;\r\n     * var identity = _.memoize(_.identity);\r\n     *\r\n     * identity(object);\r\n     * // => { 'user': 'fred' }\r\n     * identity(other);\r\n     * // => { 'user': 'barney' }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "negate",
        "params": [
            [
                "Function",
                "predicate",
                "The predicate to negate.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that negates the result of the predicate `func`. The\r\n     * `func` predicate is invoked with the `this` binding and arguments of the\r\n     * created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} predicate The predicate to negate.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * function isEven(n) {\r\n     *   return n % 2 == 0;\r\n     * }\r\n     *\r\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\r\n     * // => [1, 3, 5]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "once",
        "params": [
            [
                "Function",
                "func",
                "The function to restrict.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new restricted function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\r\n     * to the function return the value of the first call. The `func` is invoked\r\n     * with the `this` binding and arguments of the created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * var initialize = _.once(createApplication);\r\n     * initialize();\r\n     * initialize();\r\n     * // `initialize` invokes `createApplication` once\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "partial",
        "params": [
            [
                "Function",
                "func",
                "The function to partially apply arguments to.\r "
            ],
            [
                "...*",
                "[partials]",
                "The arguments to be partially applied.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new partially applied function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func` with `partial` arguments prepended\r\n     * to those provided to the new function. This method is like `_.bind` except\r\n     * it does **not** alter the `this` binding.\r\n     *\r\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** This method does not set the \"length\" property of partially\r\n     * applied functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to partially apply arguments to.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new partially applied function.\r\n     * @example\r\n     *\r\n     * var greet = function(greeting, name) {\r\n     *   return greeting + ' ' + name;\r\n     * };\r\n     *\r\n     * var sayHelloTo = _.partial(greet, 'hello');\r\n     * sayHelloTo('fred');\r\n     * // => 'hello fred'\r\n     *\r\n     * // using placeholders\r\n     * var greetFred = _.partial(greet, _, 'fred');\r\n     * greetFred('hi');\r\n     * // => 'hi fred'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "partialRight",
        "params": [
            [
                "Function",
                "func",
                "The function to partially apply arguments to.\r "
            ],
            [
                "...*",
                "[partials]",
                "The arguments to be partially applied.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new partially applied function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.partial` except that partially applied arguments\r\n     * are appended to those provided to the new function.\r\n     *\r\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** This method does not set the \"length\" property of partially\r\n     * applied functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to partially apply arguments to.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new partially applied function.\r\n     * @example\r\n     *\r\n     * var greet = function(greeting, name) {\r\n     *   return greeting + ' ' + name;\r\n     * };\r\n     *\r\n     * var greetFred = _.partialRight(greet, 'fred');\r\n     * greetFred('hi');\r\n     * // => 'hi fred'\r\n     *\r\n     * // using placeholders\r\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\r\n     * sayHelloTo('fred');\r\n     * // => 'hello fred'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "rearg",
        "params": [
            [
                "Function",
                "func",
                "The function to rearrange arguments for.\r "
            ],
            [
                "...(number|number[]",
                "indexes",
                "The arranged argument indexes,\r specified as individual indexes or arrays of indexes.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func` with arguments arranged according\r\n     * to the specified indexes where the argument value at the first index is\r\n     * provided as the first argument, the argument value at the second index is\r\n     * provided as the second argument, and so on.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to rearrange arguments for.\r\n     * @param {...(number|number[])} indexes The arranged argument indexes,\r\n     *  specified as individual indexes or arrays of indexes.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var rearged = _.rearg(function(a, b, c) {\r\n     *   return [a, b, c];\r\n     * }, 2, 0, 1);\r\n     *\r\n     * rearged('b', 'c', 'a')\r\n     * // => ['a', 'b', 'c']\r\n     *\r\n     * var map = _.rearg(_.map, [1, 0]);\r\n     * map(function(n) {\r\n     *   return n * 3;\r\n     * }, [1, 2, 3]);\r\n     * // => [3, 6, 9]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "restParam",
        "params": [
            [
                "Function",
                "func",
                "The function to apply a rest parameter to.\r "
            ],
            [
                "number",
                "[start=func.length-1]",
                "The start position of the rest parameter.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func` with the `this` binding of the\r\n     * created function and arguments from `start` and beyond provided as an array.\r\n     *\r\n     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var say = _.restParam(function(what, names) {\r\n     *   return what + ' ' + _.initial(names).join(', ') +\r\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\r\n     * });\r\n     *\r\n     * say('hello', 'fred', 'barney', 'pebbles');\r\n     * // => 'hello fred, barney, & pebbles'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "spread",
        "params": [
            [
                "Function",
                "func",
                "The function to spread arguments over.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func` with the `this` binding of the created\r\n     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\r\n     *\r\n     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to spread arguments over.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var say = _.spread(function(who, what) {\r\n     *   return who + ' says ' + what;\r\n     * });\r\n     *\r\n     * say(['fred', 'hello']);\r\n     * // => 'fred says hello'\r\n     *\r\n     * // with a Promise\r\n     * var numbers = Promise.all([\r\n     *   Promise.resolve(40),\r\n     *   Promise.resolve(36)\r\n     * ]);\r\n     *\r\n     * numbers.then(_.spread(function(x, y) {\r\n     *   return x + y;\r\n     * }));\r\n     * // => a Promise of 76\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "throttle",
        "params": [
            [
                "Function",
                "func",
                "The function to throttle.\r "
            ],
            [
                "number",
                "[wait=0]",
                "The number of milliseconds to throttle invocations to.\r "
            ],
            [
                "Object",
                "[options]",
                "The options object.\r "
            ],
            [
                "boolean",
                "[options.leading=true]",
                "Specify invoking on the leading\r edge of the timeout.\r "
            ],
            [
                "boolean",
                "[options.trailing=true]",
                "Specify invoking on the trailing\r edge of the timeout.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new throttled function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a throttled function that only invokes `func` at most once per\r\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\r\n     * method to cancel delayed invocations. Provide an options object to indicate\r\n     * that `func` should be invoked on the leading and/or trailing edge of the\r\n     * `wait` timeout. Subsequent calls to the throttled function return the\r\n     * result of the last `func` call.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\r\n     * on the trailing edge of the timeout only if the the throttled function is\r\n     * invoked more than once during the `wait` timeout.\r\n     *\r\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\r\n     * for details over the differences between `_.throttle` and `_.debounce`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to throttle.\r\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\r\n     * @param {Object} [options] The options object.\r\n     * @param {boolean} [options.leading=true] Specify invoking on the leading\r\n     *  edge of the timeout.\r\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing\r\n     *  edge of the timeout.\r\n     * @returns {Function} Returns the new throttled function.\r\n     * @example\r\n     *\r\n     * // avoid excessively updating the position while scrolling\r\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\r\n     *\r\n     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes\r\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\r\n     *   'trailing': false\r\n     * }));\r\n     *\r\n     * // cancel a trailing throttled call\r\n     * jQuery(window).on('popstate', throttled.cancel);\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Function",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "wrap",
        "params": [
            [
                "*",
                "value",
                "The value to wrap.\r "
            ],
            [
                "Function",
                "wrapper",
                "The wrapper function.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that provides `value` to the wrapper function as its\r\n     * first argument. Any additional arguments provided to the function are\r\n     * appended to those provided to the wrapper function. The wrapper is invoked\r\n     * with the `this` binding of the created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {*} value The value to wrap.\r\n     * @param {Function} wrapper The wrapper function.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var p = _.wrap(_.escape, function(func, text) {\r\n     *   return '<p>' + func(text) + '</p>';\r\n     * });\r\n     *\r\n     * p('fred, barney, & pebbles');\r\n     * // => '<p>fred, barney, &amp; pebbles</p>'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "clone",
        "params": [
            [
                "*",
                "value",
                "The value to clone.\r "
            ],
            [
                "boolean",
                "[isDeep]",
                "Specify a deep clone.\r "
            ],
            [
                "Function",
                "[customizer]",
                "The function to customize cloning values.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `customizer`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the cloned value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,\r\n     * otherwise they are assigned by reference. If `customizer` is provided it is\r\n     * invoked to produce the cloned values. If `customizer` returns `undefined`\r\n     * cloning is handled by the method instead. The `customizer` is bound to\r\n     * `thisArg` and invoked with two argument; (value [, index|key, object]).\r\n     *\r\n     * **Note:** This method is loosely based on the\r\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\r\n     * The enumerable properties of `arguments` objects and objects created by\r\n     * constructors other than `Object` are cloned to plain `Object` objects. An\r\n     * empty object is returned for uncloneable values such as functions, DOM nodes,\r\n     * Maps, Sets, and WeakMaps.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @param {Function} [customizer] The function to customize cloning values.\r\n     * @param {*} [thisArg] The `this` binding of `customizer`.\r\n     * @returns {*} Returns the cloned value.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney' },\r\n     *   { 'user': 'fred' }\r\n     * ];\r\n     *\r\n     * var shallow = _.clone(users);\r\n     * shallow[0] === users[0];\r\n     * // => true\r\n     *\r\n     * var deep = _.clone(users, true);\r\n     * deep[0] === users[0];\r\n     * // => false\r\n     *\r\n     * // using a customizer callback\r\n     * var el = _.clone(document.body, function(value) {\r\n     *   if (_.isElement(value)) {\r\n     *     return value.cloneNode(false);\r\n     *   }\r\n     * });\r\n     *\r\n     * el === document.body\r\n     * // => false\r\n     * el.nodeName\r\n     * // => BODY\r\n     * el.childNodes.length;\r\n     * // => 0\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "cloneDeep",
        "params": [
            [
                "*",
                "value",
                "The value to deep clone.\r "
            ],
            [
                "Function",
                "[customizer]",
                "The function to customize cloning values.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `customizer`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the deep cloned value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a deep clone of `value`. If `customizer` is provided it is invoked\r\n     * to produce the cloned values. If `customizer` returns `undefined` cloning\r\n     * is handled by the method instead. The `customizer` is bound to `thisArg`\r\n     * and invoked with two argument; (value [, index|key, object]).\r\n     *\r\n     * **Note:** This method is loosely based on the\r\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\r\n     * The enumerable properties of `arguments` objects and objects created by\r\n     * constructors other than `Object` are cloned to plain `Object` objects. An\r\n     * empty object is returned for uncloneable values such as functions, DOM nodes,\r\n     * Maps, Sets, and WeakMaps.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to deep clone.\r\n     * @param {Function} [customizer] The function to customize cloning values.\r\n     * @param {*} [thisArg] The `this` binding of `customizer`.\r\n     * @returns {*} Returns the deep cloned value.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney' },\r\n     *   { 'user': 'fred' }\r\n     * ];\r\n     *\r\n     * var deep = _.cloneDeep(users);\r\n     * deep[0] === users[0];\r\n     * // => false\r\n     *\r\n     * // using a customizer callback\r\n     * var el = _.cloneDeep(document.body, function(value) {\r\n     *   if (_.isElement(value)) {\r\n     *     return value.cloneNode(true);\r\n     *   }\r\n     * });\r\n     *\r\n     * el === document.body\r\n     * // => false\r\n     * el.nodeName\r\n     * // => BODY\r\n     * el.childNodes.length;\r\n     * // => 20\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "gt",
        "params": [
            [
                "*",
                "value",
                "The value to compare.\r "
            ],
            [
                "*",
                "other",
                "The other value to compare.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is greater than `other`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is greater than `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\r\n     * @example\r\n     *\r\n     * _.gt(3, 1);\r\n     * // => true\r\n     *\r\n     * _.gt(3, 3);\r\n     * // => false\r\n     *\r\n     * _.gt(1, 3);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "gte",
        "params": [
            [
                "*",
                "value",
                "The value to compare.\r "
            ],
            [
                "*",
                "other",
                "The other value to compare.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is greater than or equal to `other`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is greater than or equal to `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\r\n     * @example\r\n     *\r\n     * _.gte(3, 1);\r\n     * // => true\r\n     *\r\n     * _.gte(3, 3);\r\n     * // => true\r\n     *\r\n     * _.gte(1, 3);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isArguments",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as an `arguments` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArguments(function() { return arguments; }());\r\n     * // => true\r\n     *\r\n     * _.isArguments([1, 2, 3]);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isArray",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as an `Array` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArray([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArray(function() { return arguments; }());\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isBoolean",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isBoolean(false);\r\n     * // => true\r\n     *\r\n     * _.isBoolean(null);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isDate",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a `Date` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isDate(new Date);\r\n     * // => true\r\n     *\r\n     * _.isDate('Mon April 23 2012');\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isElement",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is a DOM element, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is a DOM element.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\r\n     * @example\r\n     *\r\n     * _.isElement(document.body);\r\n     * // => true\r\n     *\r\n     * _.isElement('<body>');\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isEmpty",
        "params": [
            [
                "Array|Object|string",
                "value",
                "The value to inspect.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is empty, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is empty. A value is considered empty unless it is an\r\n     * `arguments` object, array, string, or jQuery-like collection with a length\r\n     * greater than `0` or an object with own enumerable properties.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {Array|Object|string} value The value to inspect.\r\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\r\n     * @example\r\n     *\r\n     * _.isEmpty(null);\r\n     * // => true\r\n     *\r\n     * _.isEmpty(true);\r\n     * // => true\r\n     *\r\n     * _.isEmpty(1);\r\n     * // => true\r\n     *\r\n     * _.isEmpty([1, 2, 3]);\r\n     * // => false\r\n     *\r\n     * _.isEmpty({ 'a': 1 });\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "eq"
        ],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isEqual",
        "params": [
            [
                "*",
                "value",
                "The value to compare.\r "
            ],
            [
                "*",
                "other",
                "The other value to compare.\r "
            ],
            [
                "Function",
                "[customizer]",
                "The function to customize value comparisons.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `customizer`.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if the values are equivalent, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Performs a deep comparison between two values to determine if they are\r\n     * equivalent. If `customizer` is provided it is invoked to compare values.\r\n     * If `customizer` returns `undefined` comparisons are handled by the method\r\n     * instead. The `customizer` is bound to `thisArg` and invoked with three\r\n     * arguments: (value, other [, index|key]).\r\n     *\r\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\r\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\r\n     * their own, not inherited, enumerable properties. Functions and DOM nodes\r\n     * are **not** supported. Provide a customizer function to extend support\r\n     * for comparing other values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias eq\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @param {Function} [customizer] The function to customize value comparisons.\r\n     * @param {*} [thisArg] The `this` binding of `customizer`.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     * var other = { 'user': 'fred' };\r\n     *\r\n     * object == other;\r\n     * // => false\r\n     *\r\n     * _.isEqual(object, other);\r\n     * // => true\r\n     *\r\n     * // using a customizer callback\r\n     * var array = ['hello', 'goodbye'];\r\n     * var other = ['hi', 'goodbye'];\r\n     *\r\n     * _.isEqual(array, other, function(value, other) {\r\n     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {\r\n     *     return true;\r\n     *   }\r\n     * });\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isError",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is an error object, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\r\n     * `SyntaxError`, `TypeError`, or `URIError` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isError(new Error);\r\n     * // => true\r\n     *\r\n     * _.isError(Error);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isFinite",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is a finite number, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is a finite primitive number.\r\n     *\r\n     * **Note:** This method is based on [`Number.isFinite`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\r\n     * @example\r\n     *\r\n     * _.isFinite(10);\r\n     * // => true\r\n     *\r\n     * _.isFinite('10');\r\n     * // => false\r\n     *\r\n     * _.isFinite(true);\r\n     * // => false\r\n     *\r\n     * _.isFinite(Object(10));\r\n     * // => false\r\n     *\r\n     * _.isFinite(Infinity);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isFunction",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isFunction(_);\r\n     * // => true\r\n     *\r\n     * _.isFunction(/abc/);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isObject",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is an object, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\r\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObject({});\r\n     * // => true\r\n     *\r\n     * _.isObject([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObject(1);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isMatch",
        "params": [
            [
                "Object",
                "object",
                "The object to inspect.\r "
            ],
            [
                "Object",
                "source",
                "The object of property values to match.\r "
            ],
            [
                "Function",
                "[customizer]",
                "The function to customize value comparisons.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `customizer`.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `object` is a match, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Performs a deep comparison between `object` and `source` to determine if\r\n     * `object` contains equivalent property values. If `customizer` is provided\r\n     * it is invoked to compare values. If `customizer` returns `undefined`\r\n     * comparisons are handled by the method instead. The `customizer` is bound\r\n     * to `thisArg` and invoked with three arguments: (value, other, index|key).\r\n     *\r\n     * **Note:** This method supports comparing properties of arrays, booleans,\r\n     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions\r\n     * and DOM nodes are **not** supported. Provide a customizer function to extend\r\n     * support for comparing other values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property values to match.\r\n     * @param {Function} [customizer] The function to customize value comparisons.\r\n     * @param {*} [thisArg] The `this` binding of `customizer`.\r\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred', 'age': 40 };\r\n     *\r\n     * _.isMatch(object, { 'age': 40 });\r\n     * // => true\r\n     *\r\n     * _.isMatch(object, { 'age': 36 });\r\n     * // => false\r\n     *\r\n     * // using a customizer callback\r\n     * var object = { 'greeting': 'hello' };\r\n     * var source = { 'greeting': 'hi' };\r\n     *\r\n     * _.isMatch(object, source, function(value, other) {\r\n     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;\r\n     * });\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isNaN",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is `NaN`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is `NaN`.\r\n     *\r\n     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\r\n     * which returns `true` for `undefined` and other non-numeric values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNaN(NaN);\r\n     * // => true\r\n     *\r\n     * _.isNaN(new Number(NaN));\r\n     * // => true\r\n     *\r\n     * isNaN(undefined);\r\n     * // => true\r\n     *\r\n     * _.isNaN(undefined);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isNative",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is a native function, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is a native function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNative(Array.prototype.push);\r\n     * // => true\r\n     *\r\n     * _.isNative(_);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isNull",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is `null`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is `null`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNull(null);\r\n     * // => true\r\n     *\r\n     * _.isNull(void 0);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isNumber",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a `Number` primitive or object.\r\n     *\r\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\r\n     * as numbers, use the `_.isFinite` method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNumber(8.4);\r\n     * // => true\r\n     *\r\n     * _.isNumber(NaN);\r\n     * // => true\r\n     *\r\n     * _.isNumber('8.4');\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isPlainObject",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is a plain object, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is a plain object, that is, an object created by the\r\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\r\n     *\r\n     * **Note:** This method assumes objects created by the `Object` constructor\r\n     * have no inherited enumerable properties.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     * }\r\n     *\r\n     * _.isPlainObject(new Foo);\r\n     * // => false\r\n     *\r\n     * _.isPlainObject([1, 2, 3]);\r\n     * // => false\r\n     *\r\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\r\n     * // => true\r\n     *\r\n     * _.isPlainObject(Object.create(null));\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isRegExp",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a `RegExp` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isRegExp(/abc/);\r\n     * // => true\r\n     *\r\n     * _.isRegExp('/abc/');\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isString",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a `String` primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isString('abc');\r\n     * // => true\r\n     *\r\n     * _.isString(1);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isTypedArray",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is correctly classified, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is classified as a typed array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n     * @example\r\n     *\r\n     * _.isTypedArray(new Uint8Array);\r\n     * // => true\r\n     *\r\n     * _.isTypedArray([]);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "isUndefined",
        "params": [
            [
                "*",
                "value",
                "The value to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is `undefined`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is `undefined`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isUndefined(void 0);\r\n     * // => true\r\n     *\r\n     * _.isUndefined(null);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "lt",
        "params": [
            [
                "*",
                "value",
                "The value to compare.\r "
            ],
            [
                "*",
                "other",
                "The other value to compare.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is less than `other`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is less than `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\r\n     * @example\r\n     *\r\n     * _.lt(1, 3);\r\n     * // => true\r\n     *\r\n     * _.lt(3, 3);\r\n     * // => false\r\n     *\r\n     * _.lt(3, 1);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "lte",
        "params": [
            [
                "*",
                "value",
                "The value to compare.\r "
            ],
            [
                "*",
                "other",
                "The other value to compare.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `value` is less than or equal to `other`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `value` is less than or equal to `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\r\n     * @example\r\n     *\r\n     * _.lte(1, 3);\r\n     * // => true\r\n     *\r\n     * _.lte(3, 3);\r\n     * // => true\r\n     *\r\n     * _.lte(3, 1);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "toArray",
        "params": [
            [
                "*",
                "value",
                "The value to convert.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the converted array."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `value` to an array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     * @example\r\n     *\r\n     * (function() {\r\n     *   return _.toArray(arguments).slice(1);\r\n     * }(1, 2, 3));\r\n     * // => [2, 3]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Lang",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "toPlainObject",
        "params": [
            [
                "*",
                "value",
                "The value to convert.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the converted plain object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `value` to a plain object flattening inherited enumerable\r\n     * properties of `value` to own properties of the plain object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {Object} Returns the converted plain object.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.assign({ 'a': 1 }, new Foo);\r\n     * // => { 'a': 1, 'b': 2 }\r\n     *\r\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\r\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "extend"
        ],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "assign",
        "params": [
            [
                "Object",
                "object",
                "The destination object.\r "
            ],
            [
                "...Object",
                "[sources]",
                "The source objects.\r "
            ],
            [
                "Function",
                "[customizer]",
                "The function to customize assigned values.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `customizer`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Assigns own enumerable properties of source object(s) to the destination\r\n     * object. Subsequent sources overwrite property assignments of previous sources.\r\n     * If `customizer` is provided it is invoked to produce the assigned values.\r\n     * The `customizer` is bound to `thisArg` and invoked with five arguments:\r\n     * (objectValue, sourceValue, key, object, source).\r\n     *\r\n     * **Note:** This method mutates `object` and is based on\r\n     * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias extend\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @param {*} [thisArg] The `this` binding of `customizer`.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\r\n     * // => { 'user': 'fred', 'age': 40 }\r\n     *\r\n     * // using a customizer callback\r\n     * var defaults = _.partialRight(_.assign, function(value, other) {\r\n     *   return _.isUndefined(value) ? other : value;\r\n     * });\r\n     *\r\n     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "create",
        "params": [
            [
                "Object",
                "prototype",
                "The object to inherit from.\r "
            ],
            [
                "Object",
                "[properties]",
                "The properties to assign to the object.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object that inherits from the given `prototype` object. If a\r\n     * `properties` object is provided its own enumerable properties are assigned\r\n     * to the created object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} prototype The object to inherit from.\r\n     * @param {Object} [properties] The properties to assign to the object.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * function Shape() {\r\n     *   this.x = 0;\r\n     *   this.y = 0;\r\n     * }\r\n     *\r\n     * function Circle() {\r\n     *   Shape.call(this);\r\n     * }\r\n     *\r\n     * Circle.prototype = _.create(Shape.prototype, {\r\n     *   'constructor': Circle\r\n     * });\r\n     *\r\n     * var circle = new Circle;\r\n     * circle instanceof Circle;\r\n     * // => true\r\n     *\r\n     * circle instanceof Shape;\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "defaults",
        "params": [
            [
                "Object",
                "object",
                "The destination object.\r "
            ],
            [
                "...Object",
                "[sources]",
                "The source objects.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Assigns own enumerable properties of source object(s) to the destination\r\n     * object for all destination properties that resolve to `undefined`. Once a\r\n     * property is set, additional values of the same property are ignored.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "findKey",
        "params": [
            [
                "Object",
                "object",
                "The object to search.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "string|undefined",
            " Returns the key of the matched element, else `undefined`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.find` except that it returns the key of the first\r\n     * element `predicate` returns truthy for instead of the element itself.\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to search.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'barney':  { 'age': 36, 'active': true },\r\n     *   'fred':    { 'age': 40, 'active': false },\r\n     *   'pebbles': { 'age': 1,  'active': true }\r\n     * };\r\n     *\r\n     * _.findKey(users, function(chr) {\r\n     *   return chr.age < 40;\r\n     * });\r\n     * // => 'barney' (iteration order is not guaranteed)\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.findKey(users, { 'age': 1, 'active': true });\r\n     * // => 'pebbles'\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.findKey(users, 'active', false);\r\n     * // => 'fred'\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.findKey(users, 'active');\r\n     * // => 'barney'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "findLastKey",
        "params": [
            [
                "Object",
                "object",
                "The object to search.\r "
            ],
            [
                "Function|Object|string",
                "[predicate=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "string|undefined",
            " Returns the key of the matched element, else `undefined`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.findKey` except that it iterates over elements of\r\n     * a collection in the opposite order.\r\n     *\r\n     * If a property name is provided for `predicate` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `predicate` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to search.\r\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'barney':  { 'age': 36, 'active': true },\r\n     *   'fred':    { 'age': 40, 'active': false },\r\n     *   'pebbles': { 'age': 1,  'active': true }\r\n     * };\r\n     *\r\n     * _.findLastKey(users, function(chr) {\r\n     *   return chr.age < 40;\r\n     * });\r\n     * // => returns `pebbles` assuming `_.findKey` returns `barney`\r\n     *\r\n     * // using the `_.matches` callback shorthand\r\n     * _.findLastKey(users, { 'age': 36, 'active': true });\r\n     * // => 'barney'\r\n     *\r\n     * // using the `_.matchesProperty` callback shorthand\r\n     * _.findLastKey(users, 'active', false);\r\n     * // => 'fred'\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.findLastKey(users, 'active');\r\n     * // => 'pebbles'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "forIn",
        "params": [
            [
                "Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Iterates over own and inherited enumerable properties of an object invoking\r\n     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked\r\n     * with three arguments: (value, key, object). Iteratee functions may exit\r\n     * iteration early by explicitly returning `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forIn(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "forInRight",
        "params": [
            [
                "Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.forIn` except that it iterates over properties of\r\n     * `object` in the opposite order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forInRight(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "forOwn",
        "params": [
            [
                "Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Iterates over own enumerable properties of an object invoking `iteratee`\r\n     * for each property. The `iteratee` is bound to `thisArg` and invoked with\r\n     * three arguments: (value, key, object). Iteratee functions may exit iteration\r\n     * early by explicitly returning `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forOwn(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => logs 'a' and 'b' (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "forOwnRight",
        "params": [
            [
                "Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.forOwn` except that it iterates over properties of\r\n     * `object` in the opposite order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forOwnRight(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "methods"
        ],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "functions",
        "params": [
            [
                "Object",
                "object",
                "The object to inspect.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of property names."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of function property names from all enumerable properties,\r\n     * own and inherited, of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias methods\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @returns {Array} Returns the new array of property names.\r\n     * @example\r\n     *\r\n     * _.functions(_);\r\n     * // => ['after', 'ary', 'assign', ...]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "get",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ],
            [
                "Array|string",
                "path",
                "The path of the property to get.\r "
            ],
            [
                "*",
                "[defaultValue]",
                "The value returned if the resolved value is `undefined`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the resolved value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the property value at `path` of `object`. If the resolved value is\r\n     * `undefined` the `defaultValue` is used in its place.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.get(object, 'a[0].b.c');\r\n     * // => 3\r\n     *\r\n     * _.get(object, ['a', '0', 'b', 'c']);\r\n     * // => 3\r\n     *\r\n     * _.get(object, 'a.b.c', 'default');\r\n     * // => 'default'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "has",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ],
            [
                "Array|string",
                "path",
                "The path to check.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `path` is a direct property, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `path` is a direct property.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': { 'b': { 'c': 3 } } };\r\n     *\r\n     * _.has(object, 'a');\r\n     * // => true\r\n     *\r\n     * _.has(object, 'a.b.c');\r\n     * // => true\r\n     *\r\n     * _.has(object, ['a', 'b', 'c']);\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "invert",
        "params": [
            [
                "Object",
                "object",
                "The object to invert.\r "
            ],
            [
                "boolean",
                "[multiValue]",
                "Allow multiple values per key.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new inverted object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object composed of the inverted keys and values of `object`.\r\n     * If `object` contains duplicate values, subsequent values overwrite property\r\n     * assignments of previous values unless `multiValue` is `true`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to invert.\r\n     * @param {boolean} [multiValue] Allow multiple values per key.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Object} Returns the new inverted object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n     *\r\n     * _.invert(object);\r\n     * // => { '1': 'c', '2': 'b' }\r\n     *\r\n     * // with `multiValue`\r\n     * _.invert(object, true);\r\n     * // => { '1': ['a', 'c'], '2': ['b'] }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "keys",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of property names."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of the own enumerable property names of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects. See the\r\n     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)\r\n     * for more details.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.keys(new Foo);\r\n     * // => ['a', 'b'] (iteration order is not guaranteed)\r\n     *\r\n     * _.keys('hi');\r\n     * // => ['0', '1']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "keysIn",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of property names."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of the own and inherited enumerable property names of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.keysIn(new Foo);\r\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "mapKeys",
        "params": [
            [
                "Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new mapped object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The opposite of `_.mapValues`; this method creates an object with the\r\n     * same values as `object` and keys generated by running each own enumerable\r\n     * property of `object` through `iteratee`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns the new mapped object.\r\n     * @example\r\n     *\r\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\r\n     *   return key + value;\r\n     * });\r\n     * // => { 'a1': 1, 'b2': 2 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "mapValues",
        "params": [
            [
                "Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee=_.identity]",
                "The function invoked\r per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new mapped object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object with the same keys as `object` and values generated by\r\n     * running each own enumerable property of `object` through `iteratee`. The\r\n     * iteratee function is bound to `thisArg` and invoked with three arguments:\r\n     * (value, key, object).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\r\n     *  per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Object} Returns the new mapped object.\r\n     * @example\r\n     *\r\n     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {\r\n     *   return n * 3;\r\n     * });\r\n     * // => { 'a': 3, 'b': 6 }\r\n     *\r\n     * var users = {\r\n     *   'fred':    { 'user': 'fred',    'age': 40 },\r\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\r\n     * };\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.mapValues(users, 'age');\r\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "merge",
        "params": [
            [
                "Object",
                "object",
                "The destination object.\r "
            ],
            [
                "...Object",
                "[sources]",
                "The source objects.\r "
            ],
            [
                "Function",
                "[customizer]",
                "The function to customize assigned values.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `customizer`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Recursively merges own enumerable properties of the source object(s), that\r\n     * don't resolve to `undefined` into the destination object. Subsequent sources\r\n     * overwrite property assignments of previous sources. If `customizer` is\r\n     * provided it is invoked to produce the merged values of the destination and\r\n     * source properties. If `customizer` returns `undefined` merging is handled\r\n     * by the method instead. The `customizer` is bound to `thisArg` and invoked\r\n     * with five arguments: (objectValue, sourceValue, key, object, source).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @param {*} [thisArg] The `this` binding of `customizer`.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\r\n     * };\r\n     *\r\n     * var ages = {\r\n     *   'data': [{ 'age': 36 }, { 'age': 40 }]\r\n     * };\r\n     *\r\n     * _.merge(users, ages);\r\n     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\r\n     *\r\n     * // using a customizer callback\r\n     * var object = {\r\n     *   'fruits': ['apple'],\r\n     *   'vegetables': ['beet']\r\n     * };\r\n     *\r\n     * var other = {\r\n     *   'fruits': ['banana'],\r\n     *   'vegetables': ['carrot']\r\n     * };\r\n     *\r\n     * _.merge(object, other, function(a, b) {\r\n     *   if (_.isArray(a)) {\r\n     *     return a.concat(b);\r\n     *   }\r\n     * });\r\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "omit",
        "params": [
            [
                "Object",
                "object",
                "The source object.\r "
            ],
            [
                "Function|...(string|string[]",
                "[predicate]",
                "The function invoked per\r iteration or property names to omit, specified as individual property\r names or arrays of property names.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The opposite of `_.pick`; this method creates an object composed of the\r\n     * own and inherited enumerable properties of `object` that are not omitted.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {Function|...(string|string[])} [predicate] The function invoked per\r\n     *  iteration or property names to omit, specified as individual property\r\n     *  names or arrays of property names.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred', 'age': 40 };\r\n     *\r\n     * _.omit(object, 'age');\r\n     * // => { 'user': 'fred' }\r\n     *\r\n     * _.omit(object, _.isNumber);\r\n     * // => { 'user': 'fred' }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "pairs",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of key-value pairs."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a two dimensional array of the key-value pairs for `object`,\r\n     * e.g. `[[key1, value1], [key2, value2]]`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the new array of key-value pairs.\r\n     * @example\r\n     *\r\n     * _.pairs({ 'barney': 36, 'fred': 40 });\r\n     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "pick",
        "params": [
            [
                "Object",
                "object",
                "The source object.\r "
            ],
            [
                "Function|...(string|string[]",
                "[predicate]",
                "The function invoked per\r iteration or property names to pick, specified as individual property\r names or arrays of property names.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `predicate`.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns the new object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an object composed of the picked `object` properties. Property\r\n     * names may be specified as individual arguments or as arrays of property\r\n     * names. If `predicate` is provided it is invoked for each property of `object`\r\n     * picking the properties `predicate` returns truthy for. The predicate is\r\n     * bound to `thisArg` and invoked with three arguments: (value, key, object).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {Function|...(string|string[])} [predicate] The function invoked per\r\n     *  iteration or property names to pick, specified as individual property\r\n     *  names or arrays of property names.\r\n     * @param {*} [thisArg] The `this` binding of `predicate`.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred', 'age': 40 };\r\n     *\r\n     * _.pick(object, 'user');\r\n     * // => { 'user': 'fred' }\r\n     *\r\n     * _.pick(object, _.isString);\r\n     * // => { 'user': 'fred' }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "result",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ],
            [
                "Array|string",
                "path",
                "The path of the property to resolve.\r "
            ],
            [
                "*",
                "[defaultValue]",
                "The value returned if the resolved value is `undefined`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the resolved value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method is like `_.get` except that if the resolved value is a function\r\n     * it is invoked with the `this` binding of its parent object and its result\r\n     * is returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to resolve.\r\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\r\n     *\r\n     * _.result(object, 'a[0].b.c1');\r\n     * // => 3\r\n     *\r\n     * _.result(object, 'a[0].b.c2');\r\n     * // => 4\r\n     *\r\n     * _.result(object, 'a.b.c', 'default');\r\n     * // => 'default'\r\n     *\r\n     * _.result(object, 'a.b.c', _.constant('default'));\r\n     * // => 'default'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "set",
        "params": [
            [
                "Object",
                "object",
                "The object to augment.\r "
            ],
            [
                "Array|string",
                "path",
                "The path of the property to set.\r "
            ],
            [
                "*",
                "value",
                "The value to set.\r "
            ]
        ],
        "returns": [
            "Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Sets the property value of `path` on `object`. If a portion of `path`\r\n     * does not exist it is created.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to augment.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.set(object, 'a[0].b.c', 4);\r\n     * console.log(object.a[0].b.c);\r\n     * // => 4\r\n     *\r\n     * _.set(object, 'x[0].y.z', 5);\r\n     * console.log(object.x[0].y.z);\r\n     * // => 5\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "transform",
        "params": [
            [
                "Array|Object",
                "object",
                "The object to iterate over.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[accumulator]",
                "The custom accumulator value.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the accumulated value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * An alternative to `_.reduce`; this method transforms `object` to a new\r\n     * `accumulator` object which is the result of running each of its own enumerable\r\n     * properties through `iteratee`, with each invocation potentially mutating\r\n     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\r\n     * with four arguments: (accumulator, value, key, object). Iteratee functions\r\n     * may exit iteration early by explicitly returning `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Array|Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The custom accumulator value.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @example\r\n     *\r\n     * _.transform([2, 3, 4], function(result, n) {\r\n     *   result.push(n *= n);\r\n     *   return n % 2 == 0;\r\n     * });\r\n     * // => [4, 9]\r\n     *\r\n     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {\r\n     *   result[key] = n * 3;\r\n     * });\r\n     * // => { 'a': 3, 'b': 6 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "values",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of property values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of the own enumerable property values of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property values.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.values(new Foo);\r\n     * // => [1, 2] (iteration order is not guaranteed)\r\n     *\r\n     * _.values('hi');\r\n     * // => ['h', 'i']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Object",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "valuesIn",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of property values."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of the own and inherited enumerable property values\r\n     * of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property values.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.valuesIn(new Foo);\r\n     * // => [1, 2, 3] (iteration order is not guaranteed)\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Number",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "inRange",
        "params": [
            [
                "number",
                "n",
                "The number to check.\r "
            ],
            [
                "number",
                "[start=0]",
                "The start of the range.\r "
            ],
            [
                "number",
                "end",
                "The end of the range.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `n` is in the range, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `n` is between `start` and up to but not including, `end`. If\r\n     * `end` is not specified it is set to `start` with `start` then set to `0`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Number\r\n     * @param {number} n The number to check.\r\n     * @param {number} [start=0] The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.\r\n     * @example\r\n     *\r\n     * _.inRange(3, 2, 4);\r\n     * // => true\r\n     *\r\n     * _.inRange(4, 8);\r\n     * // => true\r\n     *\r\n     * _.inRange(4, 2);\r\n     * // => false\r\n     *\r\n     * _.inRange(2, 2);\r\n     * // => false\r\n     *\r\n     * _.inRange(1.2, 2);\r\n     * // => true\r\n     *\r\n     * _.inRange(5.2, 4);\r\n     * // => false\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Number",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "random",
        "params": [
            [
                "number",
                "[min=0]",
                "The minimum possible value.\r "
            ],
            [
                "number",
                "[max=1]",
                "The maximum possible value.\r "
            ],
            [
                "boolean",
                "[floating]",
                "Specify returning a floating-point number.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the random number."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Produces a random number between `min` and `max` (inclusive). If only one\r\n     * argument is provided a number between `0` and the given number is returned.\r\n     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point\r\n     * number is returned instead of an integer.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Number\r\n     * @param {number} [min=0] The minimum possible value.\r\n     * @param {number} [max=1] The maximum possible value.\r\n     * @param {boolean} [floating] Specify returning a floating-point number.\r\n     * @returns {number} Returns the random number.\r\n     * @example\r\n     *\r\n     * _.random(0, 5);\r\n     * // => an integer between 0 and 5\r\n     *\r\n     * _.random(5);\r\n     * // => also an integer between 0 and 5\r\n     *\r\n     * _.random(5, true);\r\n     * // => a floating-point number between 0 and 5\r\n     *\r\n     * _.random(1.2, 5.2);\r\n     * // => a floating-point number between 1.2 and 5.2\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "camelCase",
        "params": [
            [
                "string",
                "[string='']",
                "The string to convert.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the camel cased string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the camel cased string.\r\n     * @example\r\n     *\r\n     * _.camelCase('Foo Bar');\r\n     * // => 'fooBar'\r\n     *\r\n     * _.camelCase('--foo-bar');\r\n     * // => 'fooBar'\r\n     *\r\n     * _.camelCase('__foo_bar__');\r\n     * // => 'fooBar'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "capitalize",
        "params": [
            [
                "string",
                "[string='']",
                "The string to capitalize.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the capitalized string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Capitalizes the first character of `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to capitalize.\r\n     * @returns {string} Returns the capitalized string.\r\n     * @example\r\n     *\r\n     * _.capitalize('fred');\r\n     * // => 'Fred'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "deburr",
        "params": [
            [
                "string",
                "[string='']",
                "The string to deburr.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the deburred string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\r\n     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to deburr.\r\n     * @returns {string} Returns the deburred string.\r\n     * @example\r\n     *\r\n     * _.deburr('déjà vu');\r\n     * // => 'deja vu'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "endsWith",
        "params": [
            [
                "string",
                "[string='']",
                "The string to search.\r "
            ],
            [
                "string",
                "[target]",
                "The string to search for.\r "
            ],
            [
                "number",
                "[position=string.length]",
                "The position to search from.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `string` ends with `target`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `string` ends with the given target string.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to search.\r\n     * @param {string} [target] The string to search for.\r\n     * @param {number} [position=string.length] The position to search from.\r\n     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\r\n     * @example\r\n     *\r\n     * _.endsWith('abc', 'c');\r\n     * // => true\r\n     *\r\n     * _.endsWith('abc', 'b');\r\n     * // => false\r\n     *\r\n     * _.endsWith('abc', 'b', 2);\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "escape",
        "params": [
            [
                "string",
                "[string='']",
                "The string to escape.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the escaped string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\r\n     * their corresponding HTML entities.\r\n     *\r\n     * **Note:** No other characters are escaped. To escape additional characters\r\n     * use a third-party library like [_he_](https://mths.be/he).\r\n     *\r\n     * Though the \">\" character is escaped for symmetry, characters like\r\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\r\n     * unless they're part of a tag or unquoted attribute value.\r\n     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\r\n     * (under \"semi-related fun fact\") for more details.\r\n     *\r\n     * Backticks are escaped because in Internet Explorer < 9, they can break out\r\n     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),\r\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\r\n     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\r\n     * for more details.\r\n     *\r\n     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\r\n     * to reduce XSS vectors.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to escape.\r\n     * @returns {string} Returns the escaped string.\r\n     * @example\r\n     *\r\n     * _.escape('fred, barney, & pebbles');\r\n     * // => 'fred, barney, &amp; pebbles'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "escapeRegExp",
        "params": [
            [
                "string",
                "[string='']",
                "The string to escape.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the escaped string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Escapes the `RegExp` special characters \"\\\", \"/\", \"^\", \"$\", \".\", \"|\", \"?\",\r\n     * \"*\", \"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to escape.\r\n     * @returns {string} Returns the escaped string.\r\n     * @example\r\n     *\r\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\r\n     * // => '\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "kebabCase",
        "params": [
            [
                "string",
                "[string='']",
                "The string to convert.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the kebab cased string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the kebab cased string.\r\n     * @example\r\n     *\r\n     * _.kebabCase('Foo Bar');\r\n     * // => 'foo-bar'\r\n     *\r\n     * _.kebabCase('fooBar');\r\n     * // => 'foo-bar'\r\n     *\r\n     * _.kebabCase('__foo_bar__');\r\n     * // => 'foo-bar'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "pad",
        "params": [
            [
                "string",
                "[string='']",
                "The string to pad.\r "
            ],
            [
                "number",
                "[length=0]",
                "The padding length.\r "
            ],
            [
                "string",
                "[chars=' ']",
                "The string used as padding.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the padded string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Pads `string` on the left and right sides if it's shorter than `length`.\r\n     * Padding characters are truncated if they can't be evenly divided by `length`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to pad.\r\n     * @param {number} [length=0] The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padded string.\r\n     * @example\r\n     *\r\n     * _.pad('abc', 8);\r\n     * // => '  abc   '\r\n     *\r\n     * _.pad('abc', 8, '_-');\r\n     * // => '_-abc_-_'\r\n     *\r\n     * _.pad('abc', 3);\r\n     * // => 'abc'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "padLeft",
        "params": [
            [
                "string",
                "[string='']",
                "The string to pad.\r "
            ],
            [
                "number",
                "[length=0]",
                "The padding length.\r "
            ],
            [
                "string",
                "[chars=' ']",
                "The string used as padding.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the padded string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Pads `string` on the left side if it's shorter than `length`. Padding\r\n     * characters are truncated if they exceed `length`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to pad.\r\n     * @param {number} [length=0] The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padded string.\r\n     * @example\r\n     *\r\n     * _.padLeft('abc', 6);\r\n     * // => '   abc'\r\n     *\r\n     * _.padLeft('abc', 6, '_-');\r\n     * // => '_-_abc'\r\n     *\r\n     * _.padLeft('abc', 3);\r\n     * // => 'abc'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "padRight",
        "params": [
            [
                "string",
                "[string='']",
                "The string to pad.\r "
            ],
            [
                "number",
                "[length=0]",
                "The padding length.\r "
            ],
            [
                "string",
                "[chars=' ']",
                "The string used as padding.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the padded string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Pads `string` on the right side if it's shorter than `length`. Padding\r\n     * characters are truncated if they exceed `length`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to pad.\r\n     * @param {number} [length=0] The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padded string.\r\n     * @example\r\n     *\r\n     * _.padRight('abc', 6);\r\n     * // => 'abc   '\r\n     *\r\n     * _.padRight('abc', 6, '_-');\r\n     * // => 'abc_-_'\r\n     *\r\n     * _.padRight('abc', 3);\r\n     * // => 'abc'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "parseInt",
        "params": [
            [
                "string",
                "string",
                "The string to convert.\r "
            ],
            [
                "number",
                "[radix]",
                "The radix to interpret `value` by.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the converted integer."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `string` to an integer of the specified radix. If `radix` is\r\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\r\n     * in which case a `radix` of `16` is used.\r\n     *\r\n     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)\r\n     * of `parseInt`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} string The string to convert.\r\n     * @param {number} [radix] The radix to interpret `value` by.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {number} Returns the converted integer.\r\n     * @example\r\n     *\r\n     * _.parseInt('08');\r\n     * // => 8\r\n     *\r\n     * _.map(['6', '08', '10'], _.parseInt);\r\n     * // => [6, 8, 10]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "repeat",
        "params": [
            [
                "string",
                "[string='']",
                "The string to repeat.\r "
            ],
            [
                "number",
                "[n=0]",
                "The number of times to repeat the string.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the repeated string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Repeats the given string `n` times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to repeat.\r\n     * @param {number} [n=0] The number of times to repeat the string.\r\n     * @returns {string} Returns the repeated string.\r\n     * @example\r\n     *\r\n     * _.repeat('*', 3);\r\n     * // => '***'\r\n     *\r\n     * _.repeat('abc', 2);\r\n     * // => 'abcabc'\r\n     *\r\n     * _.repeat('abc', 0);\r\n     * // => ''\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "snakeCase",
        "params": [
            [
                "string",
                "[string='']",
                "The string to convert.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the snake cased string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the snake cased string.\r\n     * @example\r\n     *\r\n     * _.snakeCase('Foo Bar');\r\n     * // => 'foo_bar'\r\n     *\r\n     * _.snakeCase('fooBar');\r\n     * // => 'foo_bar'\r\n     *\r\n     * _.snakeCase('--foo-bar');\r\n     * // => 'foo_bar'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "startCase",
        "params": [
            [
                "string",
                "[string='']",
                "The string to convert.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the start cased string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the start cased string.\r\n     * @example\r\n     *\r\n     * _.startCase('--foo-bar');\r\n     * // => 'Foo Bar'\r\n     *\r\n     * _.startCase('fooBar');\r\n     * // => 'Foo Bar'\r\n     *\r\n     * _.startCase('__foo_bar__');\r\n     * // => 'Foo Bar'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "startsWith",
        "params": [
            [
                "string",
                "[string='']",
                "The string to search.\r "
            ],
            [
                "string",
                "[target]",
                "The string to search for.\r "
            ],
            [
                "number",
                "[position=0]",
                "The position to search from.\r "
            ]
        ],
        "returns": [
            "boolean",
            " Returns `true` if `string` starts with `target`, else `false`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Checks if `string` starts with the given target string.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to search.\r\n     * @param {string} [target] The string to search for.\r\n     * @param {number} [position=0] The position to search from.\r\n     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\r\n     * @example\r\n     *\r\n     * _.startsWith('abc', 'a');\r\n     * // => true\r\n     *\r\n     * _.startsWith('abc', 'b');\r\n     * // => false\r\n     *\r\n     * _.startsWith('abc', 'b', 1);\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "template",
        "params": [
            [
                "string",
                "[string='']",
                "The template string.\r "
            ],
            [
                "Object",
                "[options]",
                "The options object.\r "
            ],
            [
                "RegExp",
                "[options.escape]",
                "The HTML \"escape\" delimiter.\r "
            ],
            [
                "RegExp",
                "[options.evaluate]",
                "The \"evaluate\" delimiter.\r "
            ],
            [
                "Object",
                "[options.imports]",
                "An object to import into the template as free variables.\r "
            ],
            [
                "RegExp",
                "[options.interpolate]",
                "The \"interpolate\" delimiter.\r "
            ],
            [
                "string",
                "[options.sourceURL]",
                "The sourceURL of the template's compiled source.\r "
            ],
            [
                "string",
                "[options.variable]",
                "The data object variable name.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the compiled template function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a compiled template function that can interpolate data properties\r\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\r\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\r\n     * properties may be accessed as free variables in the template. If a setting\r\n     * object is provided it takes precedence over `_.templateSettings` values.\r\n     *\r\n     * **Note:** In the development build `_.template` utilizes\r\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\r\n     * for easier debugging.\r\n     *\r\n     * For more information on precompiling templates see\r\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\r\n     *\r\n     * For more information on Chrome extension sandboxes see\r\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The template string.\r\n     * @param {Object} [options] The options object.\r\n     * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\r\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\r\n     * @param {Object} [options.imports] An object to import into the template as free variables.\r\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\r\n     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\r\n     * @param {string} [options.variable] The data object variable name.\r\n     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.\r\n     * @returns {Function} Returns the compiled template function.\r\n     * @example\r\n     *\r\n     * // using the \"interpolate\" delimiter to create a compiled template\r\n     * var compiled = _.template('hello <%= user %>!');\r\n     * compiled({ 'user': 'fred' });\r\n     * // => 'hello fred!'\r\n     *\r\n     * // using the HTML \"escape\" delimiter to escape data property values\r\n     * var compiled = _.template('<b><%- value %></b>');\r\n     * compiled({ 'value': '<script>' });\r\n     * // => '<b>&lt;script&gt;</b>'\r\n     *\r\n     * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML\r\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\r\n     * compiled({ 'users': ['fred', 'barney'] });\r\n     * // => '<li>fred</li><li>barney</li>'\r\n     *\r\n     * // using the internal `print` function in \"evaluate\" delimiters\r\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\r\n     * compiled({ 'user': 'barney' });\r\n     * // => 'hello barney!'\r\n     *\r\n     * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter\r\n     * var compiled = _.template('hello ${ user }!');\r\n     * compiled({ 'user': 'pebbles' });\r\n     * // => 'hello pebbles!'\r\n     *\r\n     * // using custom template delimiters\r\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\r\n     * var compiled = _.template('hello {{ user }}!');\r\n     * compiled({ 'user': 'mustache' });\r\n     * // => 'hello mustache!'\r\n     *\r\n     * // using backslashes to treat delimiters as plain text\r\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\r\n     * compiled({ 'value': 'ignored' });\r\n     * // => '<%- value %>'\r\n     *\r\n     * // using the `imports` option to import `jQuery` as `jq`\r\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\r\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\r\n     * compiled({ 'users': ['fred', 'barney'] });\r\n     * // => '<li>fred</li><li>barney</li>'\r\n     *\r\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\r\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\r\n     * compiled(data);\r\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\r\n     *\r\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\r\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\r\n     * compiled.source;\r\n     * // => function(data) {\r\n     * //   var __t, __p = '';\r\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\r\n     * //   return __p;\r\n     * // }\r\n     *\r\n     * // using the `source` property to inline compiled templates for meaningful\r\n     * // line numbers in error messages and a stack trace\r\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\r\n     *   var JST = {\\\r\n     *     \"main\": ' + _.template(mainText).source + '\\\r\n     *   };\\\r\n     * ');\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "trim",
        "params": [
            [
                "string",
                "[string='']",
                "The string to trim.\r "
            ],
            [
                "string",
                "[chars=whitespace]",
                "The characters to trim.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the trimmed string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Removes leading and trailing whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trim('  abc  ');\r\n     * // => 'abc'\r\n     *\r\n     * _.trim('-_-abc-_-', '_-');\r\n     * // => 'abc'\r\n     *\r\n     * _.map(['  foo  ', '  bar  '], _.trim);\r\n     * // => ['foo', 'bar']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "trimLeft",
        "params": [
            [
                "string",
                "[string='']",
                "The string to trim.\r "
            ],
            [
                "string",
                "[chars=whitespace]",
                "The characters to trim.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the trimmed string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Removes leading whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trimLeft('  abc  ');\r\n     * // => 'abc  '\r\n     *\r\n     * _.trimLeft('-_-abc-_-', '_-');\r\n     * // => 'abc-_-'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "trimRight",
        "params": [
            [
                "string",
                "[string='']",
                "The string to trim.\r "
            ],
            [
                "string",
                "[chars=whitespace]",
                "The characters to trim.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the trimmed string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Removes trailing whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trimRight('  abc  ');\r\n     * // => '  abc'\r\n     *\r\n     * _.trimRight('-_-abc-_-', '_-');\r\n     * // => '-_-abc'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "trunc",
        "params": [
            [
                "string",
                "[string='']",
                "The string to truncate.\r "
            ],
            [
                "Object|number",
                "[options]",
                "The options object or maximum string length.\r "
            ],
            [
                "number",
                "[options.length=30]",
                "The maximum string length.\r "
            ],
            [
                "string",
                "[options.omission='...']",
                "The string to indicate text is omitted.\r "
            ],
            [
                "RegExp|string",
                "[options.separator]",
                "The separator pattern to truncate to.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the truncated string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Truncates `string` if it's longer than the given maximum string length.\r\n     * The last characters of the truncated string are replaced with the omission\r\n     * string which defaults to \"...\".\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to truncate.\r\n     * @param {Object|number} [options] The options object or maximum string length.\r\n     * @param {number} [options.length=30] The maximum string length.\r\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\r\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {string} Returns the truncated string.\r\n     * @example\r\n     *\r\n     * _.trunc('hi-diddly-ho there, neighborino');\r\n     * // => 'hi-diddly-ho there, neighbo...'\r\n     *\r\n     * _.trunc('hi-diddly-ho there, neighborino', 24);\r\n     * // => 'hi-diddly-ho there, n...'\r\n     *\r\n     * _.trunc('hi-diddly-ho there, neighborino', {\r\n     *   'length': 24,\r\n     *   'separator': ' '\r\n     * });\r\n     * // => 'hi-diddly-ho there,...'\r\n     *\r\n     * _.trunc('hi-diddly-ho there, neighborino', {\r\n     *   'length': 24,\r\n     *   'separator': /,? +/\r\n     * });\r\n     * // => 'hi-diddly-ho there...'\r\n     *\r\n     * _.trunc('hi-diddly-ho there, neighborino', {\r\n     *   'omission': ' [...]'\r\n     * });\r\n     * // => 'hi-diddly-ho there, neig [...]'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "unescape",
        "params": [
            [
                "string",
                "[string='']",
                "The string to unescape.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the unescaped string."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The inverse of `_.escape`; this method converts the HTML entities\r\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\r\n     * corresponding characters.\r\n     *\r\n     * **Note:** No other HTML entities are unescaped. To unescape additional HTML\r\n     * entities use a third-party library like [_he_](https://mths.be/he).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to unescape.\r\n     * @returns {string} Returns the unescaped string.\r\n     * @example\r\n     *\r\n     * _.unescape('fred, barney, &amp; pebbles');\r\n     * // => 'fred, barney, & pebbles'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "String",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "words",
        "params": [
            [
                "string",
                "[string='']",
                "The string to inspect.\r "
            ],
            [
                "RegExp|string",
                "[pattern]",
                "The pattern to match words.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the words of `string`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Splits `string` into an array of its words.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to inspect.\r\n     * @param {RegExp|string} [pattern] The pattern to match words.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Array} Returns the words of `string`.\r\n     * @example\r\n     *\r\n     * _.words('fred, barney, & pebbles');\r\n     * // => ['fred', 'barney', 'pebbles']\r\n     *\r\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\r\n     * // => ['fred', 'barney', '&', 'pebbles']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "attempt",
        "params": [
            [
                "Function",
                "func",
                "The function to attempt.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the `func` result or error object."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Attempts to invoke `func`, returning either the result or the caught error\r\n     * object. Any additional arguments are provided to `func` when it is invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Function} func The function to attempt.\r\n     * @returns {*} Returns the `func` result or error object.\r\n     * @example\r\n     *\r\n     * // avoid throwing errors for invalid selectors\r\n     * var elements = _.attempt(function(selector) {\r\n     *   return document.querySelectorAll(selector);\r\n     * }, '>_>');\r\n     *\r\n     * if (_.isError(elements)) {\r\n     *   elements = [];\r\n     * }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [
            "iteratee"
        ],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "callback",
        "params": [
            [
                "*",
                "[func=_.identity]",
                "The value to convert to a callback.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `func`.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the callback."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\r\n     * and arguments of the created function. If `func` is a property name the\r\n     * created callback returns the property value for a given element. If `func`\r\n     * is an object the created callback returns `true` for elements that contain\r\n     * the equivalent object properties, otherwise it returns `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @alias iteratee\r\n     * @category Utility\r\n     * @param {*} [func=_.identity] The value to convert to a callback.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\r\n     * @returns {Function} Returns the callback.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * // wrap to create custom callback shorthands\r\n     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {\r\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);\r\n     *   if (!match) {\r\n     *     return callback(func, thisArg);\r\n     *   }\r\n     *   return function(object) {\r\n     *     return match[2] == 'gt'\r\n     *       ? object[match[1]] > match[3]\r\n     *       : object[match[1]] < match[3];\r\n     *   };\r\n     * });\r\n     *\r\n     * _.filter(users, 'age__gt36');\r\n     * // => [{ 'user': 'fred', 'age': 40 }]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "constant",
        "params": [
            [
                "*",
                "value",
                "The value to return from the new function.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that returns `value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {*} value The value to return from the new function.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     * var getter = _.constant(object);\r\n     *\r\n     * getter() === object;\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "identity",
        "params": [
            [
                "*",
                "value",
                "Any value.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns `value`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * This method returns the first argument provided to it.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {*} value Any value.\r\n     * @returns {*} Returns `value`.\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     *\r\n     * _.identity(object) === object;\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "matches",
        "params": [
            [
                "Object",
                "source",
                "The object of property values to match.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that performs a deep comparison between a given object\r\n     * and `source`, returning `true` if the given object has equivalent property\r\n     * values, else `false`.\r\n     *\r\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\r\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\r\n     * their own, not inherited, enumerable properties. For comparing a single\r\n     * own or inherited property value see `_.matchesProperty`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * _.filter(users, _.matches({ 'age': 40, 'active': false }));\r\n     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "matchesProperty",
        "params": [
            [
                "Array|string",
                "path",
                "The path of the property to get.\r "
            ],
            [
                "*",
                "srcValue",
                "The value to match.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that compares the property value of `path` on a given\r\n     * object to `value`.\r\n     *\r\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\r\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\r\n     * their own, not inherited, enumerable properties.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @param {*} srcValue The value to match.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney' },\r\n     *   { 'user': 'fred' }\r\n     * ];\r\n     *\r\n     * _.find(users, _.matchesProperty('user', 'fred'));\r\n     * // => { 'user': 'fred' }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "method",
        "params": [
            [
                "Array|string",
                "path",
                "The path of the method to invoke.\r "
            ],
            [
                "...*",
                "[args]",
                "The arguments to invoke the method with.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that invokes the method at `path` on a given object.\r\n     * Any additional arguments are provided to the invoked method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Array|string} path The path of the method to invoke.\r\n     * @param {...*} [args] The arguments to invoke the method with.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': { 'b': { 'c': _.constant(2) } } },\r\n     *   { 'a': { 'b': { 'c': _.constant(1) } } }\r\n     * ];\r\n     *\r\n     * _.map(objects, _.method('a.b.c'));\r\n     * // => [2, 1]\r\n     *\r\n     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\r\n     * // => [1, 2]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "methodOf",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ],
            [
                "...*",
                "[args]",
                "The arguments to invoke the method with.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The opposite of `_.method`; this method creates a function that invokes\r\n     * the method at a given path on `object`. Any additional arguments are\r\n     * provided to the invoked method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Object} object The object to query.\r\n     * @param {...*} [args] The arguments to invoke the method with.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var array = _.times(3, _.constant),\r\n     *     object = { 'a': array, 'b': array, 'c': array };\r\n     *\r\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\r\n     * // => [2, 0]\r\n     *\r\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\r\n     * // => [2, 0]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "mixin",
        "params": [
            [
                "Function|Object",
                "[object=lodash]",
                "The destination object.\r "
            ],
            [
                "Object",
                "source",
                "The object of functions to add.\r "
            ],
            [
                "Object",
                "[options]",
                "The options object.\r "
            ],
            [
                "boolean",
                "[options.chain=true]",
                "Specify whether the functions added\r are chainable.\r "
            ]
        ],
        "returns": [
            "Function|Object",
            " Returns `object`."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Adds all own enumerable function properties of a source object to the\r\n     * destination object. If `object` is a function then methods are added to\r\n     * its prototype as well.\r\n     *\r\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\r\n     * avoid conflicts caused by modifying the original.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Function|Object} [object=lodash] The destination object.\r\n     * @param {Object} source The object of functions to add.\r\n     * @param {Object} [options] The options object.\r\n     * @param {boolean} [options.chain=true] Specify whether the functions added\r\n     *  are chainable.\r\n     * @returns {Function|Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function vowels(string) {\r\n     *   return _.filter(string, function(v) {\r\n     *     return /[aeiou]/i.test(v);\r\n     *   });\r\n     * }\r\n     *\r\n     * _.mixin({ 'vowels': vowels });\r\n     * _.vowels('fred');\r\n     * // => ['e']\r\n     *\r\n     * _('fred').vowels().value();\r\n     * // => ['e']\r\n     *\r\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\r\n     * _('fred').vowels();\r\n     * // => ['e']\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "noConflict",
        "params": [],
        "returns": [
            "Function",
            " Returns the `lodash` function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Reverts the `_` variable to its previous value and returns a reference to\r\n     * the `lodash` function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @returns {Function} Returns the `lodash` function.\r\n     * @example\r\n     *\r\n     * var lodash = _.noConflict();\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "noop",
        "params": [],
        "returns": [],
        "type": "Function",
        "comment": "/**\r\n     * A no-operation function that returns `undefined` regardless of the\r\n     * arguments it receives.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @example\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     *\r\n     * _.noop(object) === undefined;\r\n     * // => true\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "property",
        "params": [
            [
                "Array|string",
                "path",
                "The path of the property to get.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates a function that returns the property value at `path` on a\r\n     * given object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': { 'b': { 'c': 2 } } },\r\n     *   { 'a': { 'b': { 'c': 1 } } }\r\n     * ];\r\n     *\r\n     * _.map(objects, _.property('a.b.c'));\r\n     * // => [2, 1]\r\n     *\r\n     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\r\n     * // => [1, 2]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "propertyOf",
        "params": [
            [
                "Object",
                "object",
                "The object to query.\r "
            ]
        ],
        "returns": [
            "Function",
            " Returns the new function."
        ],
        "type": "Function",
        "comment": "/**\r\n     * The opposite of `_.property`; this method creates a function that returns\r\n     * the property value at a given path on `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {Object} object The object to query.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var array = [0, 1, 2],\r\n     *     object = { 'a': array, 'b': array, 'c': array };\r\n     *\r\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\r\n     * // => [2, 0]\r\n     *\r\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\r\n     * // => [2, 0]\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "range",
        "params": [
            [
                "number",
                "[start=0]",
                "The start of the range.\r "
            ],
            [
                "number",
                "end",
                "The end of the range.\r "
            ],
            [
                "number",
                "[step=1]",
                "The value to increment or decrement by.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the new array of numbers."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Creates an array of numbers (positive and/or negative) progressing from\r\n     * `start` up to, but not including, `end`. If `end` is not specified it is\r\n     * set to `start` with `start` then set to `0`. If `end` is less than `start`\r\n     * a zero-length range is created unless a negative `step` is specified.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {number} [start=0] The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @param {number} [step=1] The value to increment or decrement by.\r\n     * @returns {Array} Returns the new array of numbers.\r\n     * @example\r\n     *\r\n     * _.range(4);\r\n     * // => [0, 1, 2, 3]\r\n     *\r\n     * _.range(1, 5);\r\n     * // => [1, 2, 3, 4]\r\n     *\r\n     * _.range(0, 20, 5);\r\n     * // => [0, 5, 10, 15]\r\n     *\r\n     * _.range(0, -4, -1);\r\n     * // => [0, -1, -2, -3]\r\n     *\r\n     * _.range(1, 4, 0);\r\n     * // => [1, 1, 1]\r\n     *\r\n     * _.range(0);\r\n     * // => []\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "times",
        "params": [
            [
                "number",
                "n",
                "The number of times to invoke `iteratee`.\r "
            ],
            [
                "Function",
                "[iteratee=_.identity]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "Array",
            " Returns the array of results."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Invokes the iteratee function `n` times, returning an array of the results\r\n     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with\r\n     * one argument; (index).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {number} n The number of times to invoke `iteratee`.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {Array} Returns the array of results.\r\n     * @example\r\n     *\r\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));\r\n     * // => [3, 6, 4]\r\n     *\r\n     * _.times(3, function(n) {\r\n     *   mage.castSpell(n);\r\n     * });\r\n     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`\r\n     *\r\n     * _.times(3, function(n) {\r\n     *   this.cast(n);\r\n     * }, mage);\r\n     * // => also invokes `mage.castSpell(n)` three times\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Utility",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "uniqueId",
        "params": [
            [
                "string",
                "[prefix]",
                "The value to prefix the ID with.\r "
            ]
        ],
        "returns": [
            "string",
            " Returns the unique ID."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Generates a unique ID. If `prefix` is provided the ID is appended to it.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Utility\r\n     * @param {string} [prefix] The value to prefix the ID with.\r\n     * @returns {string} Returns the unique ID.\r\n     * @example\r\n     *\r\n     * _.uniqueId('contact_');\r\n     * // => 'contact_104'\r\n     *\r\n     * _.uniqueId();\r\n     * // => '105'\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Math",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "add",
        "params": [
            [
                "number",
                "augend",
                "The first number to add.\r "
            ],
            [
                "number",
                "addend",
                "The second number to add.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the sum."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Adds two numbers.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {number} augend The first number to add.\r\n     * @param {number} addend The second number to add.\r\n     * @returns {number} Returns the sum.\r\n     * @example\r\n     *\r\n     * _.add(6, 4);\r\n     * // => 10\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Math",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "max",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the maximum value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the maximum value of `collection`. If `collection` is empty or falsey\r\n     * `-Infinity` is returned. If an iteratee function is provided it is invoked\r\n     * for each value in `collection` to generate the criterion by which the value\r\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\r\n     * arguments: (value, index, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {*} Returns the maximum value.\r\n     * @example\r\n     *\r\n     * _.max([4, 2, 8, 6]);\r\n     * // => 8\r\n     *\r\n     * _.max([]);\r\n     * // => -Infinity\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * _.max(users, function(chr) {\r\n     *   return chr.age;\r\n     * });\r\n     * // => { 'user': 'fred', 'age': 40 }\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.max(users, 'age');\r\n     * // => { 'user': 'fred', 'age': 40 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Math",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "min",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "*",
            " Returns the minimum value."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the minimum value of `collection`. If `collection` is empty or falsey\r\n     * `Infinity` is returned. If an iteratee function is provided it is invoked\r\n     * for each value in `collection` to generate the criterion by which the value\r\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\r\n     * arguments: (value, index, collection).\r\n     *\r\n     * If a property name is provided for `iteratee` the created `_.property`\r\n     * style callback returns the property value of the given element.\r\n     *\r\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\r\n     * style callback returns `true` for elements that have a matching property\r\n     * value, else `false`.\r\n     *\r\n     * If an object is provided for `iteratee` the created `_.matches` style\r\n     * callback returns `true` for elements that have the properties of the given\r\n     * object, else `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {*} Returns the minimum value.\r\n     * @example\r\n     *\r\n     * _.min([4, 2, 8, 6]);\r\n     * // => 2\r\n     *\r\n     * _.min([]);\r\n     * // => Infinity\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * _.min(users, function(chr) {\r\n     *   return chr.age;\r\n     * });\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.min(users, 'age');\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Math",
        "isCtor": false,
        "isFunction": true,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "sum",
        "params": [
            [
                "Array|Object|string",
                "collection",
                "The collection to iterate over.\r "
            ],
            [
                "Function|Object|string",
                "[iteratee]",
                "The function invoked per iteration.\r "
            ],
            [
                "*",
                "[thisArg]",
                "The `this` binding of `iteratee`.\r "
            ]
        ],
        "returns": [
            "number",
            " Returns the sum."
        ],
        "type": "Function",
        "comment": "/**\r\n     * Gets the sum of the values in `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array|Object|string} collection The collection to iterate over.\r\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\r\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\r\n     * @returns {number} Returns the sum.\r\n     * @example\r\n     *\r\n     * _.sum([4, 6]);\r\n     * // => 10\r\n     *\r\n     * _.sum({ 'a': 4, 'b': 6 });\r\n     * // => 10\r\n     *\r\n     * var objects = [\r\n     *   { 'n': 4 },\r\n     *   { 'n': 6 }\r\n     * ];\r\n     *\r\n     * _.sum(objects, function(object) {\r\n     *   return object.n;\r\n     * });\r\n     * // => 10\r\n     *\r\n     * // using the `_.property` callback shorthand\r\n     * _.sum(objects, 'n');\r\n     * // => 10\r\n     */",
        "lang": "js"
    },
    {
        "aliases": [],
        "category": "Properties",
        "isCtor": false,
        "isFunction": false,
        "isLicense": false,
        "isPlugin": false,
        "isPrivate": false,
        "isStatic": true,
        "member": "_",
        "name": "VERSION",
        "params": [],
        "returns": [],
        "type": "string",
        "comment": "/**\r\n     * The semantic version number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @type string\r\n     */",
        "lang": "js"
    }
]